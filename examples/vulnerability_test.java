// Vulnerability Detection Test File
// This file contains various vulnerability types for testing

import java.sql.*;
import java.io.*;
import javax.xml.parsers.*;
import java.security.MessageDigest;

public class VulnerabilityTest {
    
    // SQL Injection Vulnerabilities
    public ResultSet getUserData(String userId) throws SQLException {
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost/test");
        Statement stmt = conn.createStatement();
        // SQL injection vulnerability
        String query = "SELECT * FROM users WHERE id = " + userId;
        return stmt.executeQuery(query);
    }
    
    // XXE Vulnerability
    public void parseXML(String xmlData) throws Exception {
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();  // XXE vulnerable
        DocumentBuilder db = dbf.newDocumentBuilder();
        // This is vulnerable to XXE attacks
        Document doc = db.parse(new ByteArrayInputStream(xmlData.getBytes()));
    }
    
    // Unsafe Deserialization
    public Object deserializeData(byte[] data) throws Exception {
        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data));
        return ois.readObject();  // Unsafe deserialization
    }
    
    // Command Injection
    public void executeCommand(String userInput) throws IOException {
        Runtime.getRuntime().exec("ls " + userInput);  // Command injection
        ProcessBuilder pb = new ProcessBuilder("cat", userInput);  // Command injection
        pb.start();
    }
    
    // Path Traversal
    public String readFile(String filename) throws IOException {
        File file = new File("../../../etc/passwd" + filename);  // Path traversal
        BufferedReader reader = new BufferedReader(new FileReader(file));
        return reader.readLine();
    }
    
    // Weak Cryptography
    public String hashPassword(String password) throws Exception {
        MessageDigest md = MessageDigest.getInstance("MD5");  // Weak hash algorithm
        byte[] hash = md.digest(password.getBytes());
        return new String(hash);
    }
    
    // LDAP Injection
    public void searchLDAP(String username) throws Exception {
        String searchFilter = "(uid=" + username + ")";  // LDAP injection
        // LDAP search with vulnerable filter
    }
    
    // Hardcoded Credentials
    private static final String DB_PASSWORD = "admin123";  // Hardcoded password
    private static final String API_KEY = "sk_live_1234567890abcdef";  // Hardcoded API key
    
    // Information Disclosure
    public void logSensitiveData(String ssn, String creditCard) {
        System.out.println("Processing SSN: " + ssn);  // Sensitive data in logs
        System.err.println("Credit card: " + creditCard);
    }
    
    // Weak Session Management
    public void createSession() {
        // Session without timeout
        HttpSession session = request.getSession();
        session.setMaxInactiveInterval(-1);  // No timeout
    }
    
    // Insecure Random Number Generation
    public String generateSessionId() {
        return String.valueOf(Math.random());  // Weak randomness
    }
    
    // Buffer Overflow (JNI)
    public native void unsafeNativeCall(String data);  // Potential buffer overflow in native code
    
    // XML External Entity (XXE) - Alternative pattern
    public void parseXMLAlternative(String xml) throws Exception {
        SAXParserFactory spf = SAXParserFactory.newInstance();  // XXE vulnerable
        SAXParser parser = spf.newSAXParser();
        parser.parse(new ByteArrayInputStream(xml.getBytes()), new DefaultHandler());
    }
    
    // Unsafe Reflection
    public void dynamicClassLoading(String className) throws Exception {
        Class<?> clazz = Class.forName(className);  // Unsafe reflection
        Object instance = clazz.newInstance();
    }
    
    // Insecure SSL/TLS Configuration
    public void disableSSLVerification() {
        System.setProperty("javax.net.ssl.trustStore", "");
        System.setProperty("javax.net.ssl.trustStorePassword", "");
        // SSL verification disabled
    }
    
    // Race Condition
    private static int counter = 0;
    public void incrementCounter() {
        counter++;  // Race condition vulnerability
    }
}