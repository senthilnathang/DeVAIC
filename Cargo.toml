[package]
name = "devaic"
version = "0.3.0"
edition = "2021"
resolver = "2"
authors = ["DeVAIC Team"]
description = "Advanced static code analyzer for comprehensive vulnerability, privacy, and memory safety detection in 15+ programming languages"
license = "MIT"
repository = "https://github.com/dessertlab/DeVAIC"
keywords = ["security", "vulnerability", "static-analysis", "privacy", "sanitizer"]
categories = ["development-tools", "command-line-utilities"]
rust-version = "1.70"

[dependencies]
# Core dependencies
clap = { version = "4.5", features = ["derive", "env", "wrap_help", "string"] }
serde = { version = "1.0", features = ["derive", "rc"] }
serde_json = "1.0"
anyhow = "1.0"
thiserror = "1.0"

# Language parsing - Compatible versions to avoid API breaking changes
tree-sitter = "0.20"
tree-sitter-c = "0.20"
tree-sitter-cpp = "0.20"  
tree-sitter-python = "0.20"
tree-sitter-java = "0.20"
tree-sitter-javascript = "0.20"
tree-sitter-typescript = "0.20"
tree-sitter-go = "0.20"
tree-sitter-php = "0.21"
tree-sitter-ruby = "0.20"
tree-sitter-kotlin = "0.3"
tree-sitter-c-sharp = "0.20"
tree-sitter-bash = "0.20"
tree-sitter-rust = "0.20"
tree-sitter-dart = "0.0.4"
tree-sitter-swift = "0.4"

# Regex and pattern matching - Updated with performance improvements
regex = "1.10"
once_cell = "1.19"  # Modern replacement for lazy_static
lazy_static = "1.4"  # Keep for compatibility during migration

# File handling and I/O - Enhanced performance and functionality
walkdir = "2.5"
glob = "0.3"
memmap2 = "0.9"
rayon = "1.10"
dashmap = "5.5"  # Stable version without breaking changes
siphasher = "0.3"  # Keep stable version
ignore = "0.4"  # Better gitignore support than custom filtering
jwalk = { version = "0.8", optional = true }  # Faster directory walking for large projects

# Logging - Enhanced logging capabilities
log = "0.4"
env_logger = "0.11"

# Async runtime - Updated with better performance
tokio = { version = "1.40", features = ["full"], optional = true }
async-trait = { version = "0.1", optional = true }

# Machine Learning dependencies
candle-core = { version = "0.3", optional = true }
candle-nn = { version = "0.3", optional = true }
tokenizers = { version = "0.15", optional = true }

# IDE Integration dependencies
tower-lsp = { version = "0.20", optional = true }

# Visualization dependencies (lightweight alternatives)
plotters = { version = "0.3", optional = true, default-features = false, features = ["svg_backend"] }
plotters-svg = { version = "0.3", optional = true }
# Use a lighter image library or make it truly optional
image = { version = "0.24", optional = true, default-features = false, features = ["png"] }

# Configuration - Updated versions
config = "0.13"
toml = "0.7"

# YAML support for Semgrep rules - Updated
serde_yaml = "0.9"

# Date/time for SARIF output - Updated
chrono = { version = "0.4", features = ["serde", "clock"] }

# UUID generation for vulnerability IDs
uuid = { version = "1.0", features = ["v4"] }

# Report generation - Enhanced with latest versions
tabled = "0.14"  # Compatible version
colored = "2.1"
rust_xlsxwriter = "0.76"  # Latest version with more features
printpdf = "0.7"

# Performance and utility libraries - New additions
indicatif = { version = "0.17", optional = true }  # Progress bars for long operations
console = "0.15"  # Better terminal handling
crossbeam-channel = { version = "0.5", optional = true }  # Better channel performance than std
parking_lot = { version = "0.12", optional = true }  # Faster mutexes than std
tracing = { version = "0.1", optional = true }  # Modern structured logging
tracing-subscriber = { version = "0.3", features = ["env-filter", "json"], optional = true }
num_cpus = "1.16"  # CPU count detection for AI performance optimization
lru = "0.12"  # LRU cache for AI embedding caching
reqwest = { version = "0.11", features = ["json"] }  # HTTP client for CVE pattern discovery
bincode = "1.3"  # Binary serialization for caching
futures = "0.3"  # Futures utilities for async programming
tokio-stream = { version = "0.1", features = ["sync"] }  # Stream utilities for tokio

[dev-dependencies]
tempfile = "3.13"  # Latest version
assert_cmd = "2.0"
predicates = "3.1"  # Latest version
criterion = "0.5"  # Benchmarking framework
proptest = "1.5"  # Property-based testing
mockall = "0.13"  # Mocking framework

[features]
default = ["progress", "performance", "async"]
async = ["tokio", "async-trait"]
progress = ["indicatif"]  # Progress bars feature
tracing = ["dep:tracing", "tracing-subscriber"]  # Structured logging
fast-walk = ["jwalk"]  # Fast directory walking
performance = ["parking_lot", "crossbeam-channel"]  # Performance optimizations
ml = ["candle-core", "candle-nn", "tokenizers"]  # Machine learning features
ide = ["tower-lsp", "async"]  # IDE integration features
visualization = ["plotters"]  # Visualization features (minimal)
visualization-full = ["plotters", "plotters-svg", "image"]  # Full visualization features
full = ["ml", "ide", "visualization", "async", "progress", "tracing", "fast-walk", "performance"]

[[bin]]
name = "devaic"
path = "src/main.rs"

# Compilation profiles for better performance
[profile.release]
lto = true          # Enable link-time optimization
codegen-units = 1   # Better optimization
panic = "abort"     # Smaller binaries
strip = true        # Remove debug symbols

[profile.dev]
opt-level = 1       # Some optimization in debug mode for faster development

# DeVAIC Application Configuration
# Default runtime configuration for DeVAIC analysis
[package.metadata.devaic]

[package.metadata.devaic.rules]
# Categories of vulnerabilities to analyze
enabled_categories = [
    "injection", "authentication", "authorization", "cryptographic",
    "deserialization", "logging", "validation", "privacy", "security",
    "vulnerability", "sanitizer", "dependency", "configuration",
    "llm_security", "web_security"
]

# Minimum severity level to report (CRITICAL, HIGH, MEDIUM, LOW, INFO)
severity_threshold = "LOW"

# Build break thresholds
[package.metadata.devaic.rules.build_break_rules]
max_critical = 0
max_high = 2
max_medium = 5
max_low = 10
fail_on_timeout = true
require_all_tests_pass = false

[package.metadata.devaic.output]
# Output format: table, json, sarif, pdf, excel, csv
format = "table"
verbose = false
colors = true
include_source_code = true
include_recommendations = true

# Supported output formats and their options
[package.metadata.devaic.output.formats]
json = { pretty = true, minified = false }
sarif = { version = "2.1.0", include_snippets = true }
pdf = { include_charts = false, executive_summary = false }
excel = { multiple_sheets = true, formatting = true }
csv = { delimiter = ",", include_headers = true }

[package.metadata.devaic.analysis]
# Maximum file size to analyze (in bytes)
max_file_size = 10485760  # 10MB
follow_symlinks = false
parallel_threads = 0  # 0 = auto-detect
enable_performance_mode = true
enable_cache = true

# File patterns to exclude from analysis
exclude_patterns = [
    ".git/*", ".svn/*", ".hg/*", ".bzr/*",
    "target/*", "build/*", "dist/*", "out/*",
    "**/target/**", "**/build/**", "**/dist/**",
    "node_modules/*", "**/node_modules/**",
    "vendor/*", "**/vendor/**", "third_party/*", "**/third_party/**",
    ".gradle/*", ".m2/*",
    "*.min.js", "*.bundle.js", "*.min.css",
    "*.class", "*.jar", "*.war", "*.ear",
    "*.exe", "*.dll", "*.so", "*.dylib",
    "*.o", "*.obj", "*.a", "*.lib",
    ".vscode/*", ".idea/*", "*.swp", "*.swo", ".vs/*", "*.user", "*.suo",
    ".cache/*", "*.tmp", "*.temp", "*.log",
    ".pytest_cache/*", "__pycache__/*", "*.pyc",
    ".tox/*", ".coverage", "htmlcov/*",
    "ios/Pods/*", "android/.gradle/*",
    "*.xcworkspace/*", "*.xcodeproj/*",
    ".flutter-plugins", ".flutter-plugins-dependencies",
    "coverage/*", "test-results/*", "reports/*",
    "*.lcov", "*.gcov", "*.gcno", "*.gcda"
]

# File patterns to include in analysis
include_patterns = [
    "*.c", "*.h", "*.cpp", "*.cc", "*.cxx", "*.c++", "*.hpp", "*.hxx", "*.h++",
    "*.py", "*.rb", "*.php", "*.sh", "*.bash",
    "*.java", "*.cs", "*.go", "*.rs",
    "*.kt", "*.swift", "*.dart",
    "*.js", "*.jsx", "*.mjs", "*.cjs", "*.ts", "*.tsx",
    "*.html", "*.htm", "*.vue",
    "*.st", "*.sl", "*.scl", "*.fbd", "*.ld", "*.il",
    "*.cob", "*.cobol", "*.pas", "*.pp",
    "*.yaml", "*.yml", "*.json", "*.toml", "*.ini", "*.cfg",
    "*.tf", "*.dockerfile", "Dockerfile",
    "requirements.txt", "package.json", "package-lock.json",
    "pom.xml", "build.gradle", "build.gradle.kts",
    "Gemfile", "Gemfile.lock", "go.mod", "go.sum",
    "composer.json", "composer.lock", "Cargo.toml", "Cargo.lock",
    "pubspec.yaml", "pubspec.lock"
]

[package.metadata.devaic.privacy]
detect_pii = true
detect_phi = true
detect_financial = true
compliance_frameworks = ["gdpr", "ccpa", "hipaa"]

[package.metadata.devaic.memory_safety]
enable_address_sanitizer_patterns = true
enable_thread_sanitizer_patterns = true
enable_memory_sanitizer_patterns = true
enable_undefined_behavior_patterns = true
enable_leak_sanitizer_patterns = true

[package.metadata.devaic.mobile_security]
enable_android_security = true
enable_ios_security = true
enable_flutter_security = true
check_deep_links = true
check_certificate_pinning = true
check_biometric_authentication = true
check_device_fingerprinting = true

[package.metadata.devaic.owasp]
enable_top10_2021 = true
enable_llm_top10 = true
enable_mobile_top10 = true
enable_api_security_top10 = true

[package.metadata.devaic.performance]
enable_benchmarking = false
benchmark_iterations = 3
max_analysis_time_seconds = 300
memory_limit_mb = 1024

[package.metadata.devaic.advanced_features]
# Machine learning features (requires --features ml)
enable_ml_analysis = false
ml_confidence_threshold = 0.7
# IDE integration features (requires --features ide)
enable_ide_integration = false
lsp_server_port = 7878
# Visualization features (requires --features visualization)
enable_visualization = false
generate_html_reports = false
generate_charts = false

[package.metadata.devaic.compliance]
enable_compliance_checking = true

[package.metadata.devaic.compliance.frameworks]
owasp = { enabled = true, strict_mode = false }
nist = { enabled = true, strict_mode = false }
pci_dss = { enabled = false, strict_mode = false }
iso27001 = { enabled = false, strict_mode = false }
sox = { enabled = false, strict_mode = false }

[package.metadata.devaic.logging]
log_level = "info"
enable_structured_logging = false
log_file = "devaic.log"

[package.metadata.devaic.custom_rules]
enable_custom_rules = true
custom_rules_directory = "rules/custom"
enable_yaml_patterns = true
enable_semgrep_rules = true