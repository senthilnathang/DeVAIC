rules:
  - id: javascript-xss-dom-manipulation
    message: "Potential XSS vulnerability through DOM manipulation"
    severity: high
    languages:
      - JavaScript
      - TypeScript
    patterns:
      - pattern-regex: '(?i)(innerHTML|outerHTML|document\.write)\s*[=+]\s*.*(\+|concat)'
      - pattern-regex: '(?i)(innerHTML|outerHTML)\s*=\s*.*user.*input'
    metadata:
      cwe: "CWE-79"
      owasp: "A03:2021 – Injection"
      category: "security"
      confidence: high
      subcategory:
        - "xss-vulnerability"
    fix: |
      // Use safe DOM manipulation:
      element.textContent = userInput;  // Safe
      // Or use a library like DOMPurify for HTML sanitization

  - id: javascript-prototype-pollution
    message: "Prototype pollution vulnerability"
    severity: high
    languages:
      - JavaScript
      - TypeScript
    patterns:
      - pattern-regex: '(?i)(\[.*__proto__.*\]|\.constructor\.prototype)'
      - pattern-regex: '(?i)Object\.prototype\s*\['
    metadata:
      cwe: "CWE-1321"
      owasp: "A08:2021 – Software and Data Integrity Failures"
      category: "security"
      confidence: high
      subcategory:
        - "prototype-pollution"
    fix: |
      // Validate object properties:
      if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          throw new Error('Invalid property name');
      }

  - id: javascript-eval-injection
    message: "Code injection through eval()"
    severity: critical
    languages:
      - JavaScript
      - TypeScript
    patterns:
      - pattern-regex: '(?i)eval\s*\(\s*.*user.*input'
      - pattern-regex: '(?i)Function\s*\(\s*.*user.*input'
      - pattern-regex: '(?i)setTimeout\s*\(\s*["\'].*user.*input'
    metadata:
      cwe: "CWE-94"
      owasp: "A03:2021 – Injection"
      category: "security"
      confidence: critical
      subcategory:
        - "code-injection"

  - id: javascript-cors-wildcard
    message: "CORS wildcard configuration"
    severity: high
    languages:
      - JavaScript
      - TypeScript
    patterns:
      - pattern-regex: '(?i)(access-control-allow-origin|cors).{0,20}[=:]\s*["\']?\*["\']?'
    metadata:
      cwe: "CWE-942"
      owasp: "A05:2021 – Security Misconfiguration"
      category: "security"
      confidence: high
      subcategory:
        - "cors-misconfiguration"

  - id: javascript-insecure-randomness
    message: "Insecure random number generation"
    severity: medium
    languages:
      - JavaScript
      - TypeScript
    patterns:
      - pattern-regex: '(?i)Math\.random\(\).*password|token|session'
    metadata:
      cwe: "CWE-338"
      owasp: "A02:2021 – Cryptographic Failures"
      category: "security"
      confidence: medium
      subcategory:
        - "weak-randomness"
    fix: |
      // Use crypto.getRandomValues() for security-sensitive randomness:
      const array = new Uint32Array(1);
      crypto.getRandomValues(array);

  - id: javascript-client-side-auth
    message: "Client-side authentication bypass risk"
    severity: high
    languages:
      - JavaScript
      - TypeScript
    patterns:
      - pattern-regex: '(?i)(user|admin|role).*=.*localStorage|sessionStorage'
      - pattern-regex: '(?i)if\s*\(\s*(user|admin|role).*==.*["\']admin["\']'
    metadata:
      cwe: "CWE-284"
      owasp: "A01:2021 – Broken Access Control"
      category: "security"
      confidence: high
      subcategory:
        - "client-side-auth"