{
  "summary": {
    "total_vulnerabilities": 278,
    "by_severity": {
      "LOW": 18,
      "CRITICAL": 91,
      "HIGH": 117,
      "MEDIUM": 52
    },
    "by_category": {
      "validation": 33,
      "security": 45,
      "logging": 1,
      "sanitizer": 33,
      "cryptographic": 21,
      "vulnerability": 47,
      "authentication": 25,
      "deserialization": 7,
      "authorization": 6,
      "injection": 60
    },
    "by_language": {
      "Unknown": 64,
      "Python": 22,
      "JavaScript": 57,
      "Java": 36,
      "TypeScript": 26,
      "SCADA": 10,
      "C": 18,
      "C++": 45
    },
    "mobile_security": null,
    "performance_metrics": null,
    "security_score": null
  },
  "vulnerabilities": [
    {
      "id": "GO-SQL-001",
      "cwe": "CWE-89",
      "vulnerability_type": "SQL Injection",
      "severity": "High",
      "category": "injection",
      "description": "SQL injection vulnerability detected in Go database query",
      "file_path": "test_suite/samples/vulnerable.go",
      "line_number": 28,
      "column": 0,
      "source_code": "\tdb.Exec(\"DELETE FROM users WHERE name = '\" + userID + \"'\")",
      "recommendation": "Use parameterized queries with placeholders: db.Query(\"SELECT * FROM users WHERE id = ?\", userID)"
    },
    {
      "id": "sql-injection-risk",
      "cwe": "CWE-89",
      "vulnerability_type": "SQL Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential SQL injection vulnerability detected - A03:2021 – Injection",
      "file_path": "test_suite/samples/vulnerable.go",
      "line_number": 20,
      "column": 1,
      "source_code": "query := \"SELECT * FROM users WHERE id = \" + userID",
      "recommendation": "Use parameterized queries or prepared statements"
    },
    {
      "id": "command-injection-risk",
      "cwe": "CWE-78",
      "vulnerability_type": "Command Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential command injection vulnerability detected - A03:2021 – Injection",
      "file_path": "test_suite/samples/vulnerable.go",
      "line_number": 28,
      "column": 4,
      "source_code": "db.Exec(\"DELETE FROM users WHERE name = '\" + userID + \"'\")",
      "recommendation": "Validate and sanitize input, use subprocess with shell=False"
    },
    {
      "id": "command-injection-risk",
      "cwe": "CWE-78",
      "vulnerability_type": "Command Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential command injection vulnerability detected - A03:2021 – Injection",
      "file_path": "test_suite/samples/vulnerable.go",
      "line_number": 34,
      "column": 8,
      "source_code": "cmd := exec.Command(\"sh\", \"-c\", \"echo \"+userInput)",
      "recommendation": "Validate and sanitize input, use subprocess with shell=False"
    },
    {
      "id": "path-traversal-risk",
      "cwe": "CWE-22",
      "vulnerability_type": "Path Traversal Risk",
      "severity": "High",
      "category": "security",
      "description": "Potential path traversal vulnerability detected - A01:2021 – Broken Access Control",
      "file_path": "test_suite/samples/vulnerable.go",
      "line_number": 116,
      "column": 11,
      "source_code": "vulnerableFileAccess(\"../../../etc/passwd\")",
      "recommendation": "Validate and sanitize file paths, use os.path.join()"
    },
    {
      "id": "go-sql-injection",
      "cwe": "CWE-89",
      "vulnerability_type": "SQL Injection (Go)",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "SQL injection vulnerability in Go - A03:2021 - Injection",
      "file_path": "test_suite/samples/vulnerable.go",
      "line_number": 28,
      "column": 1,
      "source_code": "db.Exec(\"DELETE FROM users WHERE name = '\" + userID + \"'\")",
      "recommendation": "Use parameterized queries with placeholders"
    },
    {
      "id": "PHP-SQL-001",
      "cwe": "CWE-89",
      "vulnerability_type": "SQL Injection",
      "severity": "Critical",
      "category": "injection",
      "description": "SQL injection vulnerability detected in PHP database query",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 9,
      "column": 0,
      "source_code": "    mysqli_query($connection, \"SELECT * FROM products WHERE name = '\" . $_POST['name'] . \"'\");",
      "recommendation": "Use prepared statements with parameter binding: $stmt = $pdo->prepare('SELECT * FROM users WHERE id = ?'); $stmt->execute([$id]);"
    },
    {
      "id": "PHP-SQL-001",
      "cwe": "CWE-89",
      "vulnerability_type": "SQL Injection",
      "severity": "Critical",
      "category": "injection",
      "description": "SQL injection vulnerability detected in PHP database query",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 12,
      "column": 0,
      "source_code": "    $pdo->query(\"SELECT * FROM orders WHERE user_id = \" . $_GET['user_id']);",
      "recommendation": "Use prepared statements with parameter binding: $stmt = $pdo->prepare('SELECT * FROM users WHERE id = ?'); $stmt->execute([$id]);"
    },
    {
      "id": "PHP-CMD-001",
      "cwe": "CWE-78",
      "vulnerability_type": "Command Injection",
      "severity": "Critical",
      "category": "injection",
      "description": "Command injection vulnerability detected in PHP exec call",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 18,
      "column": 0,
      "source_code": "    exec($_GET['cmd']);",
      "recommendation": "Validate and sanitize all user inputs before using in system commands. Use escapeshellarg() for arguments."
    },
    {
      "id": "PHP-CMD-001",
      "cwe": "CWE-78",
      "vulnerability_type": "Command Injection",
      "severity": "Critical",
      "category": "injection",
      "description": "Command injection vulnerability detected in PHP exec call",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 19,
      "column": 0,
      "source_code": "    system($_POST['command']);",
      "recommendation": "Validate and sanitize all user inputs before using in system commands. Use escapeshellarg() for arguments."
    },
    {
      "id": "PHP-CMD-001",
      "cwe": "CWE-78",
      "vulnerability_type": "Command Injection",
      "severity": "Critical",
      "category": "injection",
      "description": "Command injection vulnerability detected in PHP exec call",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 20,
      "column": 0,
      "source_code": "    shell_exec($_REQUEST['shell']);",
      "recommendation": "Validate and sanitize all user inputs before using in system commands. Use escapeshellarg() for arguments."
    },
    {
      "id": "PHP-CMD-001",
      "cwe": "CWE-78",
      "vulnerability_type": "Command Injection",
      "severity": "Critical",
      "category": "injection",
      "description": "Command injection vulnerability detected in PHP exec call",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 21,
      "column": 0,
      "source_code": "    passthru($_GET['exec']);",
      "recommendation": "Validate and sanitize all user inputs before using in system commands. Use escapeshellarg() for arguments."
    },
    {
      "id": "PHP-CMD-001",
      "cwe": "CWE-78",
      "vulnerability_type": "Command Injection",
      "severity": "Critical",
      "category": "injection",
      "description": "Command injection vulnerability detected in PHP exec call",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 24,
      "column": 0,
      "source_code": "    eval($_POST['code']);",
      "recommendation": "Validate and sanitize all user inputs before using in system commands. Use escapeshellarg() for arguments."
    },
    {
      "id": "PHP-FILE-001",
      "cwe": "CWE-98",
      "vulnerability_type": "File Inclusion",
      "severity": "Critical",
      "category": "injection",
      "description": "File inclusion vulnerability detected in PHP include/require",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 30,
      "column": 0,
      "source_code": "    include($_GET['page']);",
      "recommendation": "Validate file paths against a whitelist and use realpath() to resolve paths"
    },
    {
      "id": "PHP-FILE-001",
      "cwe": "CWE-98",
      "vulnerability_type": "File Inclusion",
      "severity": "Critical",
      "category": "injection",
      "description": "File inclusion vulnerability detected in PHP include/require",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 31,
      "column": 0,
      "source_code": "    require($_POST['file']);",
      "recommendation": "Validate file paths against a whitelist and use realpath() to resolve paths"
    },
    {
      "id": "PHP-FILE-001",
      "cwe": "CWE-98",
      "vulnerability_type": "File Inclusion",
      "severity": "Critical",
      "category": "injection",
      "description": "File inclusion vulnerability detected in PHP include/require",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 32,
      "column": 0,
      "source_code": "    include_once($_REQUEST['module']);",
      "recommendation": "Validate file paths against a whitelist and use realpath() to resolve paths"
    },
    {
      "id": "PHP-FILE-001",
      "cwe": "CWE-98",
      "vulnerability_type": "File Inclusion",
      "severity": "Critical",
      "category": "injection",
      "description": "File inclusion vulnerability detected in PHP include/require",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 33,
      "column": 0,
      "source_code": "    require_once($_GET['lib']);",
      "recommendation": "Validate file paths against a whitelist and use realpath() to resolve paths"
    },
    {
      "id": "PHP-XSS-001",
      "cwe": "CWE-79",
      "vulnerability_type": "Cross-Site Scripting",
      "severity": "High",
      "category": "injection",
      "description": "XSS vulnerability detected in PHP output",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 39,
      "column": 0,
      "source_code": "    echo $_GET['message'];",
      "recommendation": "Use htmlspecialchars() or htmlentities() to escape output: echo htmlspecialchars($userInput, ENT_QUOTES, 'UTF-8');"
    },
    {
      "id": "PHP-XSS-001",
      "cwe": "CWE-79",
      "vulnerability_type": "Cross-Site Scripting",
      "severity": "High",
      "category": "injection",
      "description": "XSS vulnerability detected in PHP output",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 40,
      "column": 0,
      "source_code": "    print $_POST['content'];",
      "recommendation": "Use htmlspecialchars() or htmlentities() to escape output: echo htmlspecialchars($userInput, ENT_QUOTES, 'UTF-8');"
    },
    {
      "id": "PHP-XSS-001",
      "cwe": "CWE-79",
      "vulnerability_type": "Cross-Site Scripting",
      "severity": "High",
      "category": "injection",
      "description": "XSS vulnerability detected in PHP output",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 41,
      "column": 0,
      "source_code": "    printf($_REQUEST['data']);",
      "recommendation": "Use htmlspecialchars() or htmlentities() to escape output: echo htmlspecialchars($userInput, ENT_QUOTES, 'UTF-8');"
    },
    {
      "id": "PHP-PATH-001",
      "cwe": "CWE-22",
      "vulnerability_type": "Path Traversal",
      "severity": "High",
      "category": "validation",
      "description": "Path traversal vulnerability detected in PHP file operation",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 47,
      "column": 0,
      "source_code": "    file_get_contents($_GET['file']);",
      "recommendation": "Validate file paths and use basename() to prevent directory traversal"
    },
    {
      "id": "PHP-PATH-001",
      "cwe": "CWE-22",
      "vulnerability_type": "Path Traversal",
      "severity": "High",
      "category": "validation",
      "description": "Path traversal vulnerability detected in PHP file operation",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 48,
      "column": 0,
      "source_code": "    file_put_contents($_POST['filename'], \"data\");",
      "recommendation": "Validate file paths and use basename() to prevent directory traversal"
    },
    {
      "id": "PHP-PATH-001",
      "cwe": "CWE-22",
      "vulnerability_type": "Path Traversal",
      "severity": "High",
      "category": "validation",
      "description": "Path traversal vulnerability detected in PHP file operation",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 49,
      "column": 0,
      "source_code": "    fopen($_REQUEST['path'], \"r\");",
      "recommendation": "Validate file paths and use basename() to prevent directory traversal"
    },
    {
      "id": "PHP-PATH-001",
      "cwe": "CWE-22",
      "vulnerability_type": "Path Traversal",
      "severity": "High",
      "category": "validation",
      "description": "Path traversal vulnerability detected in PHP file operation",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 50,
      "column": 0,
      "source_code": "    readfile($_GET['document']);",
      "recommendation": "Validate file paths and use basename() to prevent directory traversal"
    },
    {
      "id": "weak-hash-algorithm",
      "cwe": "CWE-327",
      "vulnerability_type": "Weak Hash Algorithm",
      "severity": "High",
      "category": "security",
      "description": "Weak cryptographic hash algorithm detected - A02:2021 – Cryptographic Failures",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 56,
      "column": 13,
      "source_code": "$hash1 = md5($data);",
      "recommendation": "Use secure hash algorithms like SHA-256, SHA-3, or bcrypt for passwords"
    },
    {
      "id": "weak-hash-algorithm",
      "cwe": "CWE-327",
      "vulnerability_type": "Weak Hash Algorithm",
      "severity": "High",
      "category": "security",
      "description": "Weak cryptographic hash algorithm detected - A02:2021 – Cryptographic Failures",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 57,
      "column": 13,
      "source_code": "$hash2 = sha1($data);",
      "recommendation": "Use secure hash algorithms like SHA-256, SHA-3, or bcrypt for passwords"
    },
    {
      "id": "weak-random-generator",
      "cwe": "CWE-338",
      "vulnerability_type": "Weak Random Number Generator",
      "severity": "Medium",
      "category": "security",
      "description": "Weak random number generator used for security purposes - A02:2021 – Cryptographic Failures",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 77,
      "column": 13,
      "source_code": "$token = rand();",
      "recommendation": "Use cryptographically secure random number generators (secrets module in Python, crypto.randomBytes in Node.js)"
    },
    {
      "id": "weak-random-generator",
      "cwe": "CWE-338",
      "vulnerability_type": "Weak Random Number Generator",
      "severity": "Medium",
      "category": "security",
      "description": "Weak random number generator used for security purposes - A02:2021 – Cryptographic Failures",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 78,
      "column": 20,
      "source_code": "$sessionId = mt_rand();",
      "recommendation": "Use cryptographically secure random number generators (secrets module in Python, crypto.randomBytes in Node.js)"
    },
    {
      "id": "cwe-79-xss-reflected",
      "cwe": "CWE-79",
      "vulnerability_type": "Reflected XSS",
      "severity": "High",
      "category": "vulnerability",
      "description": "Potential reflected XSS vulnerability - A03:2021 - Injection",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 39,
      "column": 4,
      "source_code": "echo $_GET['message'];",
      "recommendation": "Sanitize and validate all user input before output"
    },
    {
      "id": "cwe-79-xss-reflected",
      "cwe": "CWE-79",
      "vulnerability_type": "Reflected XSS",
      "severity": "High",
      "category": "vulnerability",
      "description": "Potential reflected XSS vulnerability - A03:2021 - Injection",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 40,
      "column": 4,
      "source_code": "print $_POST['content'];",
      "recommendation": "Sanitize and validate all user input before output"
    },
    {
      "id": "cwe-79-xss-reflected",
      "cwe": "CWE-79",
      "vulnerability_type": "Reflected XSS",
      "severity": "High",
      "category": "vulnerability",
      "description": "Potential reflected XSS vulnerability - A03:2021 - Injection",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 41,
      "column": 4,
      "source_code": "printf($_REQUEST['data']);",
      "recommendation": "Sanitize and validate all user input before output"
    },
    {
      "id": "php-code-injection",
      "cwe": "CWE-94",
      "vulnerability_type": "Code Injection (PHP)",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Code injection vulnerability in PHP - A03:2021 - Injection",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 24,
      "column": 4,
      "source_code": "eval($_POST['code']);",
      "recommendation": "Avoid dynamic code execution with user input"
    },
    {
      "id": "php-file-inclusion",
      "cwe": "CWE-98",
      "vulnerability_type": "File Inclusion",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "File inclusion vulnerability in PHP - A03:2021 - Injection",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 30,
      "column": 4,
      "source_code": "include($_GET['page']);",
      "recommendation": "Validate file paths and use whitelist approach"
    },
    {
      "id": "php-file-inclusion",
      "cwe": "CWE-98",
      "vulnerability_type": "File Inclusion",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "File inclusion vulnerability in PHP - A03:2021 - Injection",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 31,
      "column": 4,
      "source_code": "require($_POST['file']);",
      "recommendation": "Validate file paths and use whitelist approach"
    },
    {
      "id": "php-file-inclusion",
      "cwe": "CWE-98",
      "vulnerability_type": "File Inclusion",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "File inclusion vulnerability in PHP - A03:2021 - Injection",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 32,
      "column": 4,
      "source_code": "include_once($_REQUEST['module']);",
      "recommendation": "Validate file paths and use whitelist approach"
    },
    {
      "id": "php-file-inclusion",
      "cwe": "CWE-98",
      "vulnerability_type": "File Inclusion",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "File inclusion vulnerability in PHP - A03:2021 - Injection",
      "file_path": "test_suite/samples/vulnerable.php",
      "line_number": 33,
      "column": 4,
      "source_code": "require_once($_GET['lib']);",
      "recommendation": "Validate file paths and use whitelist approach"
    },
    {
      "id": "JS001",
      "cwe": "CWE-79",
      "vulnerability_type": "Cross-Site Scripting (XSS)",
      "severity": "High",
      "category": "injection",
      "description": "Potential Cross-Site Scripting (XSS) vulnerability",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 13,
      "column": 0,
      "source_code": "    document.getElementById('profile').innerHTML = '<h1>Welcome ' + userInput + '</h1>';",
      "recommendation": "Sanitize user input before inserting into DOM. Use textContent instead of innerHTML where possible"
    },
    {
      "id": "JS001",
      "cwe": "CWE-79",
      "vulnerability_type": "Cross-Site Scripting (XSS)",
      "severity": "High",
      "category": "injection",
      "description": "Potential Cross-Site Scripting (XSS) vulnerability",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 16,
      "column": 0,
      "source_code": "    document.querySelector('.greeting').outerHTML = '<div>Hello ' + userInput + '</div>';",
      "recommendation": "Sanitize user input before inserting into DOM. Use textContent instead of innerHTML where possible"
    },
    {
      "id": "JS001",
      "cwe": "CWE-79",
      "vulnerability_type": "Cross-Site Scripting (XSS)",
      "severity": "High",
      "category": "injection",
      "description": "Potential Cross-Site Scripting (XSS) vulnerability",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 19,
      "column": 0,
      "source_code": "    document.write('<script>alert(\"' + userInput + '\")</script>');",
      "recommendation": "Sanitize user input before inserting into DOM. Use textContent instead of innerHTML where possible"
    },
    {
      "id": "JS003",
      "cwe": "CWE-1321",
      "vulnerability_type": "Prototype Pollution",
      "severity": "High",
      "category": "injection",
      "description": "Potential prototype pollution vulnerability",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 33,
      "column": 0,
      "source_code": "    userData.constructor.prototype.hasAccess = true;",
      "recommendation": "Avoid modifying Object.prototype, use Object.create(null) for safe objects, validate JSON input"
    },
    {
      "id": "JS003",
      "cwe": "CWE-1321",
      "vulnerability_type": "Prototype Pollution",
      "severity": "High",
      "category": "injection",
      "description": "Potential prototype pollution vulnerability",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 36,
      "column": 0,
      "source_code": "    Object.setPrototypeOf(userData, { role: 'admin' });",
      "recommendation": "Avoid modifying Object.prototype, use Object.create(null) for safe objects, validate JSON input"
    },
    {
      "id": "JS003",
      "cwe": "CWE-1321",
      "vulnerability_type": "Prototype Pollution",
      "severity": "Critical",
      "category": "injection",
      "description": "Potential prototype pollution vulnerability",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 39,
      "column": 0,
      "source_code": "    const parsed = JSON.parse(req.body.data);  // No validation",
      "recommendation": "Avoid modifying Object.prototype, use Object.create(null) for safe objects, validate JSON input"
    },
    {
      "id": "JS005",
      "cwe": "CWE-94",
      "vulnerability_type": "Code Injection",
      "severity": "Critical",
      "category": "injection",
      "description": "Code execution via eval() or dynamic code execution",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 50,
      "column": 0,
      "source_code": "// JS005 - eval() and Function constructor vulnerabilities",
      "recommendation": "Avoid eval(), Function constructor, and dynamic imports with user input. Use safer alternatives"
    },
    {
      "id": "JS005",
      "cwe": "CWE-94",
      "vulnerability_type": "Code Injection",
      "severity": "Critical",
      "category": "injection",
      "description": "Code execution via eval() or dynamic code execution",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 53,
      "column": 0,
      "source_code": "    eval(userCode);",
      "recommendation": "Avoid eval(), Function constructor, and dynamic imports with user input. Use safer alternatives"
    },
    {
      "id": "JS005",
      "cwe": "CWE-94",
      "vulnerability_type": "Code Injection",
      "severity": "High",
      "category": "injection",
      "description": "Code execution via eval() or dynamic code execution",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 56,
      "column": 0,
      "source_code": "    const dynamicFunc = new Function('return ' + userCode);",
      "recommendation": "Avoid eval(), Function constructor, and dynamic imports with user input. Use safer alternatives"
    },
    {
      "id": "JS005",
      "cwe": "CWE-94",
      "vulnerability_type": "Code Injection",
      "severity": "High",
      "category": "injection",
      "description": "Code execution via eval() or dynamic code execution",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 63,
      "column": 0,
      "source_code": "    setInterval('console.log(\"' + userCode + '\")', 5000);",
      "recommendation": "Avoid eval(), Function constructor, and dynamic imports with user input. Use safer alternatives"
    },
    {
      "id": "JS005",
      "cwe": "CWE-94",
      "vulnerability_type": "Code Injection",
      "severity": "Critical",
      "category": "injection",
      "description": "Code execution via eval() or dynamic code execution",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 205,
      "column": 0,
      "source_code": "        eval(event.data);  // Double vulnerability: no origin check + eval",
      "recommendation": "Avoid eval(), Function constructor, and dynamic imports with user input. Use safer alternatives"
    },
    {
      "id": "JS006",
      "cwe": "CWE-79",
      "vulnerability_type": "Cross-Site Scripting (XSS)",
      "severity": "Medium",
      "category": "injection",
      "description": "Unsafe DOM manipulation with user input",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 69,
      "column": 0,
      "source_code": "    document.querySelector('iframe').src = 'https://example.com/' + url;",
      "recommendation": "Validate and sanitize URLs/data before setting DOM attributes"
    },
    {
      "id": "JS006",
      "cwe": "CWE-79",
      "vulnerability_type": "Cross-Site Scripting (XSS)",
      "severity": "Medium",
      "category": "injection",
      "description": "Unsafe DOM manipulation with user input",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 70,
      "column": 0,
      "source_code": "    document.querySelector('a').href = 'javascript:' + url;",
      "recommendation": "Validate and sanitize URLs/data before setting DOM attributes"
    },
    {
      "id": "JS006",
      "cwe": "CWE-79",
      "vulnerability_type": "Cross-Site Scripting (XSS)",
      "severity": "Medium",
      "category": "injection",
      "description": "Unsafe DOM manipulation with user input",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 73,
      "column": 0,
      "source_code": "    window.location = 'https://redirect.com?next=' + url;",
      "recommendation": "Validate and sanitize URLs/data before setting DOM attributes"
    },
    {
      "id": "JS007",
      "cwe": "CWE-1004",
      "vulnerability_type": "Sensitive Cookie Without Secure Flag",
      "severity": "Medium",
      "category": "authentication",
      "description": "Cookie manipulation detected",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 77,
      "column": 0,
      "source_code": "    document.cookie = 'sessionId=' + Math.random() + '; path=/';",
      "recommendation": "Ensure cookies are set with secure flags (HttpOnly, Secure, SameSite)"
    },
    {
      "id": "JS007",
      "cwe": "CWE-1004",
      "vulnerability_type": "Sensitive Cookie Without Secure Flag",
      "severity": "Medium",
      "category": "authentication",
      "description": "Cookie manipulation detected",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 78,
      "column": 0,
      "source_code": "    document.cookie = 'userRole=' + userRole + '; domain=.example.com';",
      "recommendation": "Ensure cookies are set with secure flags (HttpOnly, Secure, SameSite)"
    },
    {
      "id": "JS008",
      "cwe": "CWE-327",
      "vulnerability_type": "Weak Cryptography",
      "severity": "Medium",
      "category": "cryptographic",
      "description": "Insecure random number generation",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 77,
      "column": 0,
      "source_code": "    document.cookie = 'sessionId=' + Math.random() + '; path=/';",
      "recommendation": "Use crypto.getRandomValues() for cryptographic purposes"
    },
    {
      "id": "JS008",
      "cwe": "CWE-327",
      "vulnerability_type": "Weak Cryptography",
      "severity": "Medium",
      "category": "cryptographic",
      "description": "Insecure random number generation",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 84,
      "column": 0,
      "source_code": "    const sessionId = Math.random().toString(36);",
      "recommendation": "Use crypto.getRandomValues() for cryptographic purposes"
    },
    {
      "id": "JS011",
      "cwe": "CWE-327",
      "vulnerability_type": "Weak Cryptography",
      "severity": "Medium",
      "category": "cryptographic",
      "description": "Weak cryptographic practice",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 87,
      "column": 0,
      "source_code": "    const token = new Date().getTime().toString();",
      "recommendation": "Use proper cryptographic libraries and methods"
    },
    {
      "id": "JS010",
      "cwe": "CWE-327",
      "vulnerability_type": "Weak Cryptography",
      "severity": "Low",
      "category": "cryptographic",
      "description": "Base64 encoding/decoding is not encryption",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 90,
      "column": 0,
      "source_code": "    const encoded = btoa('secret data');",
      "recommendation": "Use proper encryption algorithms, base64 is encoding not encryption"
    },
    {
      "id": "JS010",
      "cwe": "CWE-327",
      "vulnerability_type": "Weak Cryptography",
      "severity": "Low",
      "category": "cryptographic",
      "description": "Base64 encoding/decoding is not encryption",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 91,
      "column": 0,
      "source_code": "    const decoded = atob('c2VjcmV0IGRhdGE=');",
      "recommendation": "Use proper encryption algorithms, base64 is encoding not encryption"
    },
    {
      "id": "JS008",
      "cwe": "CWE-327",
      "vulnerability_type": "Weak Cryptography",
      "severity": "Medium",
      "category": "cryptographic",
      "description": "Insecure random number generation",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 95,
      "column": 0,
      "source_code": "        return Math.random().toString(16) + new Date().getTime();",
      "recommendation": "Use crypto.getRandomValues() for cryptographic purposes"
    },
    {
      "id": "JS008",
      "cwe": "CWE-327",
      "vulnerability_type": "Weak Cryptography",
      "severity": "Medium",
      "category": "cryptographic",
      "description": "Insecure random number generation",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 95,
      "column": 0,
      "source_code": "        return Math.random().toString(16) + new Date().getTime();",
      "recommendation": "Use crypto.getRandomValues() for cryptographic purposes"
    },
    {
      "id": "JS008",
      "cwe": "CWE-327",
      "vulnerability_type": "Weak Cryptography",
      "severity": "Medium",
      "category": "cryptographic",
      "description": "Insecure random number generation",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 150,
      "column": 0,
      "source_code": "        const sessionId = Math.random().toString();",
      "recommendation": "Use crypto.getRandomValues() for cryptographic purposes"
    },
    {
      "id": "JS012",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "High",
      "category": "authentication",
      "description": "Hardcoded secrets or credentials detected",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 4,
      "column": 0,
      "source_code": "const API_KEY = \"sk_live_abcdef123456789012345678\";",
      "recommendation": "Store secrets in environment variables or secure vaults, never in source code"
    },
    {
      "id": "JS012",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "High",
      "category": "authentication",
      "description": "Hardcoded secrets or credentials detected",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 5,
      "column": 0,
      "source_code": "const JWT_SECRET = \"super-secret-jwt-key-dont-share\";",
      "recommendation": "Store secrets in environment variables or secure vaults, never in source code"
    },
    {
      "id": "JS012",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "High",
      "category": "authentication",
      "description": "Hardcoded secrets or credentials detected",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 6,
      "column": 0,
      "source_code": "const DATABASE_PASSWORD = \"admin123password\";",
      "recommendation": "Store secrets in environment variables or secure vaults, never in source code"
    },
    {
      "id": "JS012",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "High",
      "category": "authentication",
      "description": "Hardcoded secrets or credentials detected",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 7,
      "column": 0,
      "source_code": "const bearer_token = \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\";",
      "recommendation": "Store secrets in environment variables or secure vaults, never in source code"
    },
    {
      "id": "JS012",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "High",
      "category": "authentication",
      "description": "Hardcoded secrets or credentials detected",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 8,
      "column": 0,
      "source_code": "const authorization = \"Basic YWRtaW46cGFzc3dvcmQ=\";",
      "recommendation": "Store secrets in environment variables or secure vaults, never in source code"
    },
    {
      "id": "JS012",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "High",
      "category": "authentication",
      "description": "Hardcoded secrets or credentials detected",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 199,
      "column": 0,
      "source_code": "        password: 'password123'",
      "recommendation": "Store secrets in environment variables or secure vaults, never in source code"
    },
    {
      "id": "JS023",
      "cwe": "CWE-22",
      "vulnerability_type": "Path Traversal",
      "severity": "High",
      "category": "validation",
      "description": "Potential path traversal vulnerability",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 237,
      "column": 0,
      "source_code": "    app.uploadFile('../../../etc/passwd', 'malicious content');",
      "recommendation": "Validate and sanitize file paths, use path.resolve() and check against allowed directories"
    },
    {
      "id": "JS023",
      "cwe": "CWE-22",
      "vulnerability_type": "Path Traversal",
      "severity": "High",
      "category": "validation",
      "description": "Potential path traversal vulnerability",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 237,
      "column": 0,
      "source_code": "    app.uploadFile('../../../etc/passwd', 'malicious content');",
      "recommendation": "Validate and sanitize file paths, use path.resolve() and check against allowed directories"
    },
    {
      "id": "JS027",
      "cwe": "CWE-502",
      "vulnerability_type": "Unsafe Deserialization",
      "severity": "High",
      "category": "injection",
      "description": "Unsafe deserialization of user input",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 39,
      "column": 0,
      "source_code": "    const parsed = JSON.parse(req.body.data);  // No validation",
      "recommendation": "Validate and sanitize serialized data, use safe parsing methods, avoid deserializing untrusted data"
    },
    {
      "id": "JS028",
      "cwe": "CWE-78",
      "vulnerability_type": "Command Injection",
      "severity": "Critical",
      "category": "injection",
      "description": "Command injection vulnerability through user input",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 77,
      "column": 0,
      "source_code": "    document.cookie = 'sessionId=' + Math.random() + '; path=/';",
      "recommendation": "Use parameterized commands, validate input, avoid shell execution with user data"
    },
    {
      "id": "JS028",
      "cwe": "CWE-78",
      "vulnerability_type": "Command Injection",
      "severity": "Critical",
      "category": "injection",
      "description": "Command injection vulnerability through user input",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 78,
      "column": 0,
      "source_code": "    document.cookie = 'userRole=' + userRole + '; domain=.example.com';",
      "recommendation": "Use parameterized commands, validate input, avoid shell execution with user data"
    },
    {
      "id": "JS028",
      "cwe": "CWE-78",
      "vulnerability_type": "Command Injection",
      "severity": "Critical",
      "category": "injection",
      "description": "Command injection vulnerability through user input",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 158,
      "column": 0,
      "source_code": "        if (username === 'admin' && password === 'secret123') {",
      "recommendation": "Use parameterized commands, validate input, avoid shell execution with user data"
    },
    {
      "id": "JS028",
      "cwe": "CWE-78",
      "vulnerability_type": "Command Injection",
      "severity": "Critical",
      "category": "injection",
      "description": "Command injection vulnerability through user input",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 238,
      "column": 0,
      "source_code": "    app.executeCommand('; rm -rf /');",
      "recommendation": "Use parameterized commands, validate input, avoid shell execution with user data"
    },
    {
      "id": "weak-random-generator",
      "cwe": "CWE-338",
      "vulnerability_type": "Weak Random Number Generator",
      "severity": "Medium",
      "category": "security",
      "description": "Weak random number generator used for security purposes - A02:2021 – Cryptographic Failures",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 77,
      "column": 37,
      "source_code": "document.cookie = 'sessionId=' + Math.random() + '; path=/';",
      "recommendation": "Use cryptographically secure random number generators (secrets module in Python, crypto.randomBytes in Node.js)"
    },
    {
      "id": "weak-random-generator",
      "cwe": "CWE-338",
      "vulnerability_type": "Weak Random Number Generator",
      "severity": "Medium",
      "category": "security",
      "description": "Weak random number generator used for security purposes - A02:2021 – Cryptographic Failures",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 84,
      "column": 22,
      "source_code": "const sessionId = Math.random().toString(36);",
      "recommendation": "Use cryptographically secure random number generators (secrets module in Python, crypto.randomBytes in Node.js)"
    },
    {
      "id": "weak-random-generator",
      "cwe": "CWE-338",
      "vulnerability_type": "Weak Random Number Generator",
      "severity": "Medium",
      "category": "security",
      "description": "Weak random number generator used for security purposes - A02:2021 – Cryptographic Failures",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 95,
      "column": 15,
      "source_code": "return Math.random().toString(16) + new Date().getTime();",
      "recommendation": "Use cryptographically secure random number generators (secrets module in Python, crypto.randomBytes in Node.js)"
    },
    {
      "id": "weak-random-generator",
      "cwe": "CWE-338",
      "vulnerability_type": "Weak Random Number Generator",
      "severity": "Medium",
      "category": "security",
      "description": "Weak random number generator used for security purposes - A02:2021 – Cryptographic Failures",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 150,
      "column": 26,
      "source_code": "const sessionId = Math.random().toString();",
      "recommendation": "Use cryptographically secure random number generators (secrets module in Python, crypto.randomBytes in Node.js)"
    },
    {
      "id": "sql-injection-risk",
      "cwe": "CWE-89",
      "vulnerability_type": "SQL Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential SQL injection vulnerability detected - A03:2021 – Injection",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 16,
      "column": 13,
      "source_code": "document.querySelector('.greeting').outerHTML = '<div>Hello ' + userInput + '</div>';",
      "recommendation": "Use parameterized queries or prepared statements"
    },
    {
      "id": "sql-injection-risk",
      "cwe": "CWE-89",
      "vulnerability_type": "SQL Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential SQL injection vulnerability detected - A03:2021 – Injection",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 69,
      "column": 13,
      "source_code": "document.querySelector('iframe').src = 'https://example.com/' + url;",
      "recommendation": "Use parameterized queries or prepared statements"
    },
    {
      "id": "sql-injection-risk",
      "cwe": "CWE-89",
      "vulnerability_type": "SQL Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential SQL injection vulnerability detected - A03:2021 – Injection",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 70,
      "column": 13,
      "source_code": "document.querySelector('a').href = 'javascript:' + url;",
      "recommendation": "Use parameterized queries or prepared statements"
    },
    {
      "id": "command-injection-risk",
      "cwe": "CWE-78",
      "vulnerability_type": "Command Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential command injection vulnerability detected - A03:2021 – Injection",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 187,
      "column": 8,
      "source_code": "exec('ls -la ' + userInput, (error, stdout, stderr) => {",
      "recommendation": "Validate and sanitize input, use subprocess with shell=False"
    },
    {
      "id": "path-traversal-risk",
      "cwe": "CWE-22",
      "vulnerability_type": "Path Traversal Risk",
      "severity": "High",
      "category": "security",
      "description": "Potential path traversal vulnerability detected - A01:2021 – Broken Access Control",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 237,
      "column": 14,
      "source_code": "app.uploadFile('../../../etc/passwd', 'malicious content');",
      "recommendation": "Validate and sanitize file paths, use os.path.join()"
    },
    {
      "id": "cwe-798-hardcoded-credentials",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Hardcoded credentials detected - A07:2021 - Identification and Authentication Failures",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 4,
      "column": 10,
      "source_code": "const API_KEY = \"sk_live_abcdef123456789012345678\";",
      "recommendation": "Use environment variables or secure configuration management"
    },
    {
      "id": "cwe-798-hardcoded-credentials",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Hardcoded credentials detected - A07:2021 - Identification and Authentication Failures",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 5,
      "column": 10,
      "source_code": "const JWT_SECRET = \"super-secret-jwt-key-dont-share\";",
      "recommendation": "Use environment variables or secure configuration management"
    },
    {
      "id": "cwe-798-hardcoded-credentials",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Hardcoded credentials detected - A07:2021 - Identification and Authentication Failures",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 6,
      "column": 15,
      "source_code": "const DATABASE_PASSWORD = \"admin123password\";",
      "recommendation": "Use environment variables or secure configuration management"
    },
    {
      "id": "cwe-798-hardcoded-credentials",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Hardcoded credentials detected - A07:2021 - Identification and Authentication Failures",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 7,
      "column": 13,
      "source_code": "const bearer_token = \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\";",
      "recommendation": "Use environment variables or secure configuration management"
    },
    {
      "id": "cwe-79-xss",
      "cwe": "CWE-79",
      "vulnerability_type": "Cross-site Scripting (XSS)",
      "severity": "High",
      "category": "vulnerability",
      "description": "Potential XSS vulnerability through DOM manipulation - A03:2021 - Injection",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 13,
      "column": 39,
      "source_code": "document.getElementById('profile').innerHTML = '<h1>Welcome ' + userInput + '</h1>';",
      "recommendation": "Use safe DOM manipulation methods or sanitize user input"
    },
    {
      "id": "cwe-79-xss",
      "cwe": "CWE-79",
      "vulnerability_type": "Cross-site Scripting (XSS)",
      "severity": "High",
      "category": "vulnerability",
      "description": "Potential XSS vulnerability through DOM manipulation - A03:2021 - Injection",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 16,
      "column": 40,
      "source_code": "document.querySelector('.greeting').outerHTML = '<div>Hello ' + userInput + '</div>';",
      "recommendation": "Use safe DOM manipulation methods or sanitize user input"
    },
    {
      "id": "cwe-22-path-traversal",
      "cwe": "CWE-22",
      "vulnerability_type": "Path Traversal",
      "severity": "High",
      "category": "vulnerability",
      "description": "Path traversal vulnerability detected - A01:2021 - Broken Access Control",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 237,
      "column": 14,
      "source_code": "app.uploadFile('../../../etc/passwd', 'malicious content');",
      "recommendation": "Validate and canonicalize file paths, use whitelist approach"
    },
    {
      "id": "javascript-prototype-pollution",
      "cwe": "CWE-1321",
      "vulnerability_type": "Prototype Pollution",
      "severity": "High",
      "category": "vulnerability",
      "description": "Potential prototype pollution vulnerability - A08:2021 - Software and Data Integrity Failures",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 30,
      "column": 13,
      "source_code": "userData.__proto__.isAdmin = true;",
      "recommendation": "Validate object properties and use Object.freeze() or Map"
    },
    {
      "id": "javascript-prototype-pollution",
      "cwe": "CWE-1321",
      "vulnerability_type": "Prototype Pollution",
      "severity": "High",
      "category": "vulnerability",
      "description": "Potential prototype pollution vulnerability - A08:2021 - Software and Data Integrity Failures",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 33,
      "column": 13,
      "source_code": "userData.constructor.prototype.hasAccess = true;",
      "recommendation": "Validate object properties and use Object.freeze() or Map"
    },
    {
      "id": "javascript-prototype-pollution",
      "cwe": "CWE-1321",
      "vulnerability_type": "Prototype Pollution",
      "severity": "High",
      "category": "vulnerability",
      "description": "Potential prototype pollution vulnerability - A08:2021 - Software and Data Integrity Failures",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 44,
      "column": 25,
      "source_code": "if (key === '__proto__') continue;  // Insufficient protection",
      "recommendation": "Validate object properties and use Object.freeze() or Map"
    },
    {
      "id": "javascript-prototype-pollution",
      "cwe": "CWE-1321",
      "vulnerability_type": "Prototype Pollution",
      "severity": "High",
      "category": "vulnerability",
      "description": "Potential prototype pollution vulnerability - A08:2021 - Software and Data Integrity Failures",
      "file_path": "test_suite/samples/vulnerable.js",
      "line_number": 164,
      "column": 25,
      "source_code": "if (user && user.__proto__.isAdmin) {",
      "recommendation": "Validate object properties and use Object.freeze() or Map"
    },
    {
      "id": "JAVA003",
      "cwe": "CWE-502",
      "vulnerability_type": "Unsafe Deserialization",
      "severity": "High",
      "category": "deserialization",
      "description": "Unsafe deserialization detected",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 40,
      "column": 0,
      "source_code": "        Object obj = ois.readObject();  // Dangerous - can execute arbitrary code",
      "recommendation": "Avoid deserializing untrusted data. Use safe serialization formats like JSON"
    },
    {
      "id": "JAVA003",
      "cwe": "CWE-502",
      "vulnerability_type": "Unsafe Deserialization",
      "severity": "High",
      "category": "deserialization",
      "description": "Unsafe deserialization detected",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 47,
      "column": 0,
      "source_code": "        Object result = decoder.readObject();  // XML deserialization vulnerability",
      "recommendation": "Avoid deserializing untrusted data. Use safe serialization formats like JSON"
    },
    {
      "id": "JAVA003",
      "cwe": "CWE-502",
      "vulnerability_type": "Unsafe Deserialization",
      "severity": "High",
      "category": "deserialization",
      "description": "Unsafe deserialization detected",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 128,
      "column": 0,
      "source_code": "        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(logFile));",
      "recommendation": "Avoid deserializing untrusted data. Use safe serialization formats like JSON"
    },
    {
      "id": "JAVA003",
      "cwe": "CWE-502",
      "vulnerability_type": "Unsafe Deserialization",
      "severity": "High",
      "category": "deserialization",
      "description": "Unsafe deserialization detected",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 129,
      "column": 0,
      "source_code": "        Object data = ois.readObject();",
      "recommendation": "Avoid deserializing untrusted data. Use safe serialization formats like JSON"
    },
    {
      "id": "JAVA004",
      "cwe": "CWE-611",
      "vulnerability_type": "XML External Entity (XXE)",
      "severity": "High",
      "category": "injection",
      "description": "XML External Entity (XXE) vulnerability - XML parser not configured securely",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 54,
      "column": 0,
      "source_code": "        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();",
      "recommendation": "Configure XML parser to disable external entity processing and DTD processing"
    },
    {
      "id": "JAVA004",
      "cwe": "CWE-611",
      "vulnerability_type": "XML External Entity (XXE)",
      "severity": "High",
      "category": "injection",
      "description": "XML External Entity (XXE) vulnerability - XML parser not configured securely",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 59,
      "column": 0,
      "source_code": "        SAXParserFactory saxFactory = SAXParserFactory.newInstance();",
      "recommendation": "Configure XML parser to disable external entity processing and DTD processing"
    },
    {
      "id": "JAVA004",
      "cwe": "CWE-611",
      "vulnerability_type": "XML External Entity (XXE)",
      "severity": "High",
      "category": "injection",
      "description": "XML External Entity (XXE) vulnerability - XML parser not configured securely",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 122,
      "column": 0,
      "source_code": "            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();",
      "recommendation": "Configure XML parser to disable external entity processing and DTD processing"
    },
    {
      "id": "JAVA005",
      "cwe": "CWE-327",
      "vulnerability_type": "Weak Cryptography",
      "severity": "High",
      "category": "cryptographic",
      "description": "Weak cryptographic algorithm or implementation",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 67,
      "column": 0,
      "source_code": "        MessageDigest md5 = MessageDigest.getInstance(\"MD5\");",
      "recommendation": "Use SHA-256 or stronger hashing algorithms"
    },
    {
      "id": "JAVA005",
      "cwe": "CWE-327",
      "vulnerability_type": "Weak Cryptography",
      "severity": "High",
      "category": "cryptographic",
      "description": "Weak cryptographic algorithm or implementation",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 70,
      "column": 0,
      "source_code": "        MessageDigest sha1 = MessageDigest.getInstance(\"SHA1\");",
      "recommendation": "Use SHA-256 or stronger hashing algorithms"
    },
    {
      "id": "JAVA005",
      "cwe": "CWE-327",
      "vulnerability_type": "Weak Cryptography",
      "severity": "High",
      "category": "cryptographic",
      "description": "Weak cryptographic algorithm or implementation",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 74,
      "column": 0,
      "source_code": "        Cipher desCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");",
      "recommendation": "Use AES encryption instead of DES"
    },
    {
      "id": "JAVA005",
      "cwe": "CWE-327",
      "vulnerability_type": "Weak Cryptography",
      "severity": "Medium",
      "category": "cryptographic",
      "description": "Weak cryptographic algorithm or implementation",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 77,
      "column": 0,
      "source_code": "        Random random = new Random();",
      "recommendation": "Use SecureRandom for cryptographic operations"
    },
    {
      "id": "JAVA005",
      "cwe": "CWE-327",
      "vulnerability_type": "Weak Cryptography",
      "severity": "Medium",
      "category": "cryptographic",
      "description": "Weak cryptographic algorithm or implementation",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 83,
      "column": 0,
      "source_code": "        Random rand = new Random();  // Not cryptographically secure",
      "recommendation": "Use SecureRandom for cryptographic operations"
    },
    {
      "id": "JAVA005",
      "cwe": "CWE-327",
      "vulnerability_type": "Weak Cryptography",
      "severity": "Medium",
      "category": "cryptographic",
      "description": "Weak cryptographic algorithm or implementation",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 132,
      "column": 0,
      "source_code": "        Random rand = new Random();",
      "recommendation": "Use SecureRandom for cryptographic operations"
    },
    {
      "id": "JAVA006",
      "cwe": "CWE-470",
      "vulnerability_type": "Unsafe Reflection",
      "severity": "High",
      "category": "validation",
      "description": "Unsafe reflection with user-controlled input",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 94,
      "column": 0,
      "source_code": "        Class<?> clazz = Class.forName(userClassName);  // User-controlled class loading",
      "recommendation": "Avoid using reflection with user input. Validate and whitelist allowed classes/methods"
    },
    {
      "id": "JAVA007",
      "cwe": "CWE-22",
      "vulnerability_type": "Path Traversal",
      "severity": "High",
      "category": "validation",
      "description": "Potential path traversal vulnerability",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 104,
      "column": 0,
      "source_code": "        File file = new File(baseDir + userFileName);  // Path traversal possible",
      "recommendation": "Validate and sanitize file paths. Use Path.normalize() and check against allowed directories"
    },
    {
      "id": "JAVA007",
      "cwe": "CWE-22",
      "vulnerability_type": "Path Traversal",
      "severity": "High",
      "category": "validation",
      "description": "Potential path traversal vulnerability",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 106,
      "column": 0,
      "source_code": "        FileInputStream fis = new FileInputStream(baseDir + userFileName);",
      "recommendation": "Validate and sanitize file paths. Use Path.normalize() and check against allowed directories"
    },
    {
      "id": "JAVA007",
      "cwe": "CWE-22",
      "vulnerability_type": "Path Traversal",
      "severity": "High",
      "category": "validation",
      "description": "Potential path traversal vulnerability",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 119,
      "column": 0,
      "source_code": "        File logFile = new File(\"/var/log/app/\" + filename);",
      "recommendation": "Validate and sanitize file paths. Use Path.normalize() and check against allowed directories"
    },
    {
      "id": "JAVA008",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "High",
      "category": "authentication",
      "description": "Hardcoded credentials detected",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 13,
      "column": 0,
      "source_code": "    private static final String DB_PASSWORD = \"super_secret_password_123\";",
      "recommendation": "Store credentials in environment variables or secure configuration files"
    },
    {
      "id": "JAVA008",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "High",
      "category": "authentication",
      "description": "Hardcoded credentials detected",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 14,
      "column": 0,
      "source_code": "    private static final String API_KEY = \"sk_live_abcdef123456789\";",
      "recommendation": "Store credentials in environment variables or secure configuration files"
    },
    {
      "id": "JAVA008",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "High",
      "category": "authentication",
      "description": "Hardcoded credentials detected",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 15,
      "column": 0,
      "source_code": "    private static final String SECRET_TOKEN = \"my-secret-token-value\";",
      "recommendation": "Store credentials in environment variables or secure configuration files"
    },
    {
      "id": "JAVA008",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "High",
      "category": "authentication",
      "description": "Hardcoded credentials detected",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 136,
      "column": 0,
      "source_code": "        String jwtSecret = \"hardcoded-jwt-secret-key-do-not-use-in-production\";",
      "recommendation": "Store credentials in environment variables or secure configuration files"
    },
    {
      "id": "sql-injection-risk",
      "cwe": "CWE-89",
      "vulnerability_type": "SQL Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential SQL injection vulnerability detected - A03:2021 – Injection",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 22,
      "column": 15,
      "source_code": "String query1 = \"SELECT * FROM users WHERE id = \" + userId;",
      "recommendation": "Use parameterized queries or prepared statements"
    },
    {
      "id": "sql-injection-risk",
      "cwe": "CWE-89",
      "vulnerability_type": "SQL Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential SQL injection vulnerability detected - A03:2021 – Injection",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 27,
      "column": 15,
      "source_code": "String query2 = \"SELECT * FROM users WHERE name = '\" + userName + \"'\";",
      "recommendation": "Use parameterized queries or prepared statements"
    },
    {
      "id": "sql-injection-risk",
      "cwe": "CWE-89",
      "vulnerability_type": "SQL Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential SQL injection vulnerability detected - A03:2021 – Injection",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 33,
      "column": 13,
      "source_code": "stmt.executeUpdate(\"DELETE FROM logs WHERE message = '\" + userInput + \"'\");",
      "recommendation": "Use parameterized queries or prepared statements"
    },
    {
      "id": "command-injection-risk",
      "cwe": "CWE-78",
      "vulnerability_type": "Command Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential command injection vulnerability detected - A03:2021 – Injection",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 33,
      "column": 13,
      "source_code": "stmt.executeUpdate(\"DELETE FROM logs WHERE message = '\" + userInput + \"'\");",
      "recommendation": "Validate and sanitize input, use subprocess with shell=False"
    },
    {
      "id": "sql-injection-risk",
      "cwe": "CWE-89",
      "vulnerability_type": "SQL Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential SQL injection vulnerability detected - A03:2021 – Injection",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 115,
      "column": 15,
      "source_code": "String query = \"SELECT * FROM audit_log WHERE user_id = \" + userId + \" AND action = '\" + action + \"'\";",
      "recommendation": "Use parameterized queries or prepared statements"
    },
    {
      "id": "path-traversal-risk",
      "cwe": "CWE-22",
      "vulnerability_type": "Path Traversal Risk",
      "severity": "High",
      "category": "security",
      "description": "Potential path traversal vulnerability detected - A01:2021 – Broken Access Control",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 154,
      "column": 16,
      "source_code": "app.fileOperations(\"../../../etc/passwd\");",
      "recommendation": "Validate and sanitize file paths, use os.path.join()"
    },
    {
      "id": "cwe-798-hardcoded-credentials",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Hardcoded credentials detected - A07:2021 - Identification and Authentication Failures",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 13,
      "column": 35,
      "source_code": "private static final String DB_PASSWORD = \"super_secret_password_123\";",
      "recommendation": "Use environment variables or secure configuration management"
    },
    {
      "id": "cwe-798-hardcoded-credentials",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Hardcoded credentials detected - A07:2021 - Identification and Authentication Failures",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 14,
      "column": 36,
      "source_code": "private static final String API_KEY = \"sk_live_abcdef123456789\";",
      "recommendation": "Use environment variables or secure configuration management"
    },
    {
      "id": "cwe-798-hardcoded-credentials",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Hardcoded credentials detected - A07:2021 - Identification and Authentication Failures",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 15,
      "column": 39,
      "source_code": "private static final String SECRET_TOKEN = \"my-secret-token-value\";",
      "recommendation": "Use environment variables or secure configuration management"
    },
    {
      "id": "cwe-798-hardcoded-credentials",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Hardcoded credentials detected - A07:2021 - Identification and Authentication Failures",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 136,
      "column": 18,
      "source_code": "String jwtSecret = \"hardcoded-jwt-secret-key-do-not-use-in-production\";",
      "recommendation": "Use environment variables or secure configuration management"
    },
    {
      "id": "cwe-22-path-traversal",
      "cwe": "CWE-22",
      "vulnerability_type": "Path Traversal",
      "severity": "High",
      "category": "vulnerability",
      "description": "Path traversal vulnerability detected - A01:2021 - Broken Access Control",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 154,
      "column": 16,
      "source_code": "app.fileOperations(\"../../../etc/passwd\");",
      "recommendation": "Validate and canonicalize file paths, use whitelist approach"
    },
    {
      "id": "owasp-a08-integrity-failures",
      "cwe": "CWE-502",
      "vulnerability_type": "Software and Data Integrity Failures",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Unsafe deserialization of user input detected - A08:2021 - Software and Data Integrity Failures",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 33,
      "column": 13,
      "source_code": "stmt.executeUpdate(\"DELETE FROM logs WHERE message = '\" + userInput + \"'\");",
      "recommendation": "Use safe deserialization methods and validate input"
    },
    {
      "id": "owasp-a02-crypto-failures",
      "cwe": "CWE-327",
      "vulnerability_type": "Cryptographic Failures",
      "severity": "High",
      "category": "vulnerability",
      "description": "Weak encryption mode (ECB) detected - A02:2021 - Cryptographic Failures",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 74,
      "column": 15,
      "source_code": "Cipher desCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");",
      "recommendation": "Use secure encryption modes like CBC, GCM, or CTR"
    },
    {
      "id": "java-xxe-vulnerability",
      "cwe": "CWE-611",
      "vulnerability_type": "XML External Entity (XXE)",
      "severity": "High",
      "category": "vulnerability",
      "description": "Potential XXE vulnerability in XML parsing - A05:2021 - Security Misconfiguration",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 54,
      "column": 8,
      "source_code": "DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();",
      "recommendation": "Disable external entities in XML parsers"
    },
    {
      "id": "java-xxe-vulnerability",
      "cwe": "CWE-611",
      "vulnerability_type": "XML External Entity (XXE)",
      "severity": "High",
      "category": "vulnerability",
      "description": "Potential XXE vulnerability in XML parsing - A05:2021 - Security Misconfiguration",
      "file_path": "test_suite/samples/vulnerable.java",
      "line_number": 122,
      "column": 12,
      "source_code": "DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();",
      "recommendation": "Disable external entities in XML parsers"
    },
    {
      "id": "CPP001",
      "cwe": "CWE-401",
      "vulnerability_type": "Memory Management Error",
      "severity": "High",
      "category": "cryptographic",
      "description": "Raw pointer allocation detected - consider using smart pointers",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 8,
      "column": 0,
      "source_code": "    int* leaked_memory = new int[1000];  // Memory leak - no delete[]",
      "recommendation": "Use std::unique_ptr, std::shared_ptr, or RAII patterns instead of raw new/delete"
    },
    {
      "id": "CPP001",
      "cwe": "CWE-401",
      "vulnerability_type": "Memory Management Error",
      "severity": "High",
      "category": "cryptographic",
      "description": "Raw pointer allocation detected - consider using smart pointers",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 10,
      "column": 0,
      "source_code": "    char* another_leak = new char[256];  // Another memory leak",
      "recommendation": "Use std::unique_ptr, std::shared_ptr, or RAII patterns instead of raw new/delete"
    },
    {
      "id": "CPP002",
      "cwe": "CWE-401",
      "vulnerability_type": "Memory Management Error",
      "severity": "Medium",
      "category": "validation",
      "description": "C-style memory management in C++ code",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 16,
      "column": 0,
      "source_code": "    char* buffer = (char*)malloc(512);",
      "recommendation": "Use C++ memory management (new/delete) or preferably smart pointers"
    },
    {
      "id": "CPP002",
      "cwe": "CWE-401",
      "vulnerability_type": "Memory Management Error",
      "severity": "Medium",
      "category": "validation",
      "description": "C-style memory management in C++ code",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 17,
      "column": 0,
      "source_code": "    // Missing free(buffer);",
      "recommendation": "Use C++ memory management (new/delete) or preferably smart pointers"
    },
    {
      "id": "CPP001",
      "cwe": "CWE-401",
      "vulnerability_type": "Memory Management Error",
      "severity": "High",
      "category": "cryptographic",
      "description": "Raw pointer allocation detected - consider using smart pointers",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 89,
      "column": 0,
      "source_code": "        buffer = new char[size];  // Raw pointer - should use smart pointer",
      "recommendation": "Use std::unique_ptr, std::shared_ptr, or RAII patterns instead of raw new/delete"
    },
    {
      "id": "CPP003",
      "cwe": "CWE-401",
      "vulnerability_type": "Memory Leak",
      "severity": "High",
      "category": "validation",
      "description": "Potential memory leak - mismatched new/delete calls",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 1,
      "column": 0,
      "source_code": "Memory allocation/deallocation mismatch",
      "recommendation": "Ensure every 'new' has a corresponding 'delete' or use RAII/smart pointers"
    },
    {
      "id": "CPP004",
      "cwe": "CWE-120",
      "vulnerability_type": "Buffer Overflow",
      "severity": "High",
      "category": "injection",
      "description": "Unsafe C function used in C++ code",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 25,
      "column": 0,
      "source_code": "    strcpy(dest, src);  // Buffer overflow vulnerability",
      "recommendation": "Use C++ standard library alternatives like std::string, std::vector, or safe C functions"
    },
    {
      "id": "CPP004",
      "cwe": "CWE-120",
      "vulnerability_type": "Buffer Overflow",
      "severity": "High",
      "category": "injection",
      "description": "Unsafe C function used in C++ code",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 26,
      "column": 0,
      "source_code": "    strcat(dest, \" more text\");  // Potential buffer overflow",
      "recommendation": "Use C++ standard library alternatives like std::string, std::vector, or safe C functions"
    },
    {
      "id": "CPP004",
      "cwe": "CWE-120",
      "vulnerability_type": "Buffer Overflow",
      "severity": "High",
      "category": "injection",
      "description": "Unsafe C function used in C++ code",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 29,
      "column": 0,
      "source_code": "    sprintf(format_str, \"User input: %s\", src);  // Unsafe formatting",
      "recommendation": "Use C++ standard library alternatives like std::string, std::vector, or safe C functions"
    },
    {
      "id": "CPP004",
      "cwe": "CWE-120",
      "vulnerability_type": "Buffer Overflow",
      "severity": "High",
      "category": "injection",
      "description": "Unsafe C function used in C++ code",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 97,
      "column": 0,
      "source_code": "        strcpy(buffer, source);  // No bounds checking - buffer overflow",
      "recommendation": "Use C++ standard library alternatives like std::string, std::vector, or safe C functions"
    },
    {
      "id": "CPP006",
      "cwe": "CWE-755",
      "vulnerability_type": "Improper Exception Handling",
      "severity": "Low",
      "category": "validation",
      "description": "Exception thrown without noexcept specification",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 35,
      "column": 0,
      "source_code": "        throw std::runtime_error(\"Something went wrong\");",
      "recommendation": "Consider using noexcept specification for functions that don't throw"
    },
    {
      "id": "CPP005",
      "cwe": "CWE-754",
      "vulnerability_type": "Improper Check for Unusual Conditions",
      "severity": "Medium",
      "category": "logging",
      "description": "Generic exception catch block - potential information loss",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 36,
      "column": 0,
      "source_code": "    } catch (...) {  // Generic catch-all - information loss",
      "recommendation": "Catch specific exception types to handle errors appropriately"
    },
    {
      "id": "CPP006",
      "cwe": "CWE-755",
      "vulnerability_type": "Improper Exception Handling",
      "severity": "Low",
      "category": "validation",
      "description": "Exception thrown without noexcept specification",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 41,
      "column": 0,
      "source_code": "    throw std::invalid_argument(\"Bad argument\");",
      "recommendation": "Consider using noexcept specification for functions that don't throw"
    },
    {
      "id": "CPP009",
      "cwe": "CWE-704",
      "vulnerability_type": "Incorrect Type Conversion",
      "severity": "Medium",
      "category": "validation",
      "description": "Potentially unsafe static_cast with pointers",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 68,
      "column": 0,
      "source_code": "    char* char_ptr = static_cast<char*>(static_cast<void*>(int_ptr));  // Dangerous cast",
      "recommendation": "Consider using dynamic_cast for polymorphic types or safer alternatives"
    },
    {
      "id": "CPP010",
      "cwe": "CWE-704",
      "vulnerability_type": "Incorrect Type Conversion",
      "severity": "High",
      "category": "validation",
      "description": "Dangerous reinterpret_cast usage",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 72,
      "column": 0,
      "source_code": "// CPP010 - Dangerous reinterpret_cast",
      "recommendation": "reinterpret_cast is dangerous and should be avoided. Use safer alternatives"
    },
    {
      "id": "CPP010",
      "cwe": "CWE-704",
      "vulnerability_type": "Incorrect Type Conversion",
      "severity": "High",
      "category": "validation",
      "description": "Dangerous reinterpret_cast usage",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 75,
      "column": 0,
      "source_code": "    char* bytes = reinterpret_cast<char*>(&number);  // Very dangerous cast",
      "recommendation": "reinterpret_cast is dangerous and should be avoided. Use safer alternatives"
    },
    {
      "id": "cwe-125-buffer-overflow",
      "cwe": "CWE-125",
      "vulnerability_type": "Buffer Overflow",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Buffer overflow vulnerability from unsafe function usage - A06:2021 - Vulnerable and Outdated Components",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 25,
      "column": 4,
      "source_code": "strcpy(dest, src);  // Buffer overflow vulnerability",
      "recommendation": "Use safe alternatives: strncpy, strncat, snprintf, fgets"
    },
    {
      "id": "cwe-125-buffer-overflow",
      "cwe": "CWE-125",
      "vulnerability_type": "Buffer Overflow",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Buffer overflow vulnerability from unsafe function usage - A06:2021 - Vulnerable and Outdated Components",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 26,
      "column": 4,
      "source_code": "strcat(dest, \" more text\");  // Potential buffer overflow",
      "recommendation": "Use safe alternatives: strncpy, strncat, snprintf, fgets"
    },
    {
      "id": "cwe-125-buffer-overflow",
      "cwe": "CWE-125",
      "vulnerability_type": "Buffer Overflow",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Buffer overflow vulnerability from unsafe function usage - A06:2021 - Vulnerable and Outdated Components",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 29,
      "column": 4,
      "source_code": "sprintf(format_str, \"User input: %s\", src);  // Unsafe formatting",
      "recommendation": "Use safe alternatives: strncpy, strncat, snprintf, fgets"
    },
    {
      "id": "cwe-125-buffer-overflow",
      "cwe": "CWE-125",
      "vulnerability_type": "Buffer Overflow",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Buffer overflow vulnerability from unsafe function usage - A06:2021 - Vulnerable and Outdated Components",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 97,
      "column": 8,
      "source_code": "strcpy(buffer, source);  // No bounds checking - buffer overflow",
      "recommendation": "Use safe alternatives: strncpy, strncat, snprintf, fgets"
    },
    {
      "id": "array-bounds-risk",
      "cwe": "CWE-125",
      "vulnerability_type": "Array Bounds Risk",
      "severity": "Medium",
      "category": "sanitizer",
      "description": "Array access without bounds checking - AddressSanitizer recommended (Google Sanitizers: AddressSanitizer)",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 8,
      "column": 29,
      "source_code": "int* leaked_memory = new int[1000];  // Memory leak - no delete[]",
      "recommendation": "Use AddressSanitizer (-fsanitize=address) to detect out-of-bounds access"
    },
    {
      "id": "array-bounds-risk",
      "cwe": "CWE-125",
      "vulnerability_type": "Array Bounds Risk",
      "severity": "Medium",
      "category": "sanitizer",
      "description": "Array access without bounds checking - AddressSanitizer recommended (Google Sanitizers: AddressSanitizer)",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 10,
      "column": 29,
      "source_code": "char* another_leak = new char[256];  // Another memory leak",
      "recommendation": "Use AddressSanitizer (-fsanitize=address) to detect out-of-bounds access"
    },
    {
      "id": "heap-use-after-free-risk",
      "cwe": "CWE-416",
      "vulnerability_type": "Use After Free Risk",
      "severity": "Critical",
      "category": "sanitizer",
      "description": "Potential use-after-free vulnerability - AddressSanitizer recommended (Google Sanitizers: AddressSanitizer)",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 17,
      "column": 15,
      "source_code": "// Missing free(buffer);",
      "recommendation": "Use AddressSanitizer (-fsanitize=address) to detect use-after-free at runtime"
    },
    {
      "id": "array-bounds-risk",
      "cwe": "CWE-125",
      "vulnerability_type": "Array Bounds Risk",
      "severity": "Medium",
      "category": "sanitizer",
      "description": "Array access without bounds checking - AddressSanitizer recommended (Google Sanitizers: AddressSanitizer)",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 22,
      "column": 9,
      "source_code": "char dest[10];",
      "recommendation": "Use AddressSanitizer (-fsanitize=address) to detect out-of-bounds access"
    },
    {
      "id": "buffer-overflow-risk",
      "cwe": "CWE-120",
      "vulnerability_type": "Buffer Overflow Risk",
      "severity": "Critical",
      "category": "sanitizer",
      "description": "Function prone to buffer overflow - AddressSanitizer recommended (Google Sanitizers: AddressSanitizer)",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 25,
      "column": 4,
      "source_code": "strcpy(dest, src);  // Buffer overflow vulnerability",
      "recommendation": "Use AddressSanitizer (-fsanitize=address) to detect buffer overflows at runtime"
    },
    {
      "id": "buffer-overflow-risk",
      "cwe": "CWE-120",
      "vulnerability_type": "Buffer Overflow Risk",
      "severity": "Critical",
      "category": "sanitizer",
      "description": "Function prone to buffer overflow - AddressSanitizer recommended (Google Sanitizers: AddressSanitizer)",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 26,
      "column": 4,
      "source_code": "strcat(dest, \" more text\");  // Potential buffer overflow",
      "recommendation": "Use AddressSanitizer (-fsanitize=address) to detect buffer overflows at runtime"
    },
    {
      "id": "array-bounds-risk",
      "cwe": "CWE-125",
      "vulnerability_type": "Array Bounds Risk",
      "severity": "Medium",
      "category": "sanitizer",
      "description": "Array access without bounds checking - AddressSanitizer recommended (Google Sanitizers: AddressSanitizer)",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 28,
      "column": 9,
      "source_code": "char format_str[100];",
      "recommendation": "Use AddressSanitizer (-fsanitize=address) to detect out-of-bounds access"
    },
    {
      "id": "buffer-overflow-risk",
      "cwe": "CWE-120",
      "vulnerability_type": "Buffer Overflow Risk",
      "severity": "Critical",
      "category": "sanitizer",
      "description": "Function prone to buffer overflow - AddressSanitizer recommended (Google Sanitizers: AddressSanitizer)",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 29,
      "column": 4,
      "source_code": "sprintf(format_str, \"User input: %s\", src);  // Unsafe formatting",
      "recommendation": "Use AddressSanitizer (-fsanitize=address) to detect buffer overflows at runtime"
    },
    {
      "id": "array-bounds-risk",
      "cwe": "CWE-125",
      "vulnerability_type": "Array Bounds Risk",
      "severity": "Medium",
      "category": "sanitizer",
      "description": "Array access without bounds checking - AddressSanitizer recommended (Google Sanitizers: AddressSanitizer)",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 78,
      "column": 4,
      "source_code": "bytes[0] = 0xFF;",
      "recommendation": "Use AddressSanitizer (-fsanitize=address) to detect out-of-bounds access"
    },
    {
      "id": "array-bounds-risk",
      "cwe": "CWE-125",
      "vulnerability_type": "Array Bounds Risk",
      "severity": "Medium",
      "category": "sanitizer",
      "description": "Array access without bounds checking - AddressSanitizer recommended (Google Sanitizers: AddressSanitizer)",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 89,
      "column": 21,
      "source_code": "buffer = new char[size];  // Raw pointer - should use smart pointer",
      "recommendation": "Use AddressSanitizer (-fsanitize=address) to detect out-of-bounds access"
    },
    {
      "id": "buffer-overflow-risk",
      "cwe": "CWE-120",
      "vulnerability_type": "Buffer Overflow Risk",
      "severity": "Critical",
      "category": "sanitizer",
      "description": "Function prone to buffer overflow - AddressSanitizer recommended (Google Sanitizers: AddressSanitizer)",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 97,
      "column": 8,
      "source_code": "strcpy(buffer, source);  // No bounds checking - buffer overflow",
      "recommendation": "Use AddressSanitizer (-fsanitize=address) to detect buffer overflows at runtime"
    },
    {
      "id": "array-bounds-risk",
      "cwe": "CWE-125",
      "vulnerability_type": "Array Bounds Risk",
      "severity": "Medium",
      "category": "sanitizer",
      "description": "Array access without bounds checking - AddressSanitizer recommended (Google Sanitizers: AddressSanitizer)",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 102,
      "column": 8,
      "source_code": "buffer[index] = 'X';  // Potential out-of-bounds access",
      "recommendation": "Use AddressSanitizer (-fsanitize=address) to detect out-of-bounds access"
    },
    {
      "id": "malloc-without-init",
      "cwe": "CWE-457",
      "vulnerability_type": "Malloc Without Initialization",
      "severity": "Medium",
      "category": "sanitizer",
      "description": "malloc() used without initialization - MemorySanitizer recommended (Google Sanitizers: MemorySanitizer)",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 16,
      "column": 26,
      "source_code": "char* buffer = (char*)malloc(512);",
      "recommendation": "Use MemorySanitizer (-fsanitize=memory) or calloc() for zero-initialized memory"
    },
    {
      "id": "null-pointer-dereference",
      "cwe": "CWE-476",
      "vulnerability_type": "Null Pointer Dereference Risk",
      "severity": "High",
      "category": "sanitizer",
      "description": "Pointer dereference without null check (Google Sanitizers: UndefinedBehavior)",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 8,
      "column": 7,
      "source_code": "int* leaked_memory = new int[1000];  // Memory leak - no delete[]",
      "recommendation": "Use UndefinedBehaviorSanitizer (-fsanitize=undefined) to detect null dereferences"
    },
    {
      "id": "null-pointer-dereference",
      "cwe": "CWE-476",
      "vulnerability_type": "Null Pointer Dereference Risk",
      "severity": "High",
      "category": "sanitizer",
      "description": "Pointer dereference without null check (Google Sanitizers: UndefinedBehavior)",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 10,
      "column": 8,
      "source_code": "char* another_leak = new char[256];  // Another memory leak",
      "recommendation": "Use UndefinedBehaviorSanitizer (-fsanitize=undefined) to detect null dereferences"
    },
    {
      "id": "null-pointer-dereference",
      "cwe": "CWE-476",
      "vulnerability_type": "Null Pointer Dereference Risk",
      "severity": "High",
      "category": "sanitizer",
      "description": "Pointer dereference without null check (Google Sanitizers: UndefinedBehavior)",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 16,
      "column": 8,
      "source_code": "char* buffer = (char*)malloc(512);",
      "recommendation": "Use UndefinedBehaviorSanitizer (-fsanitize=undefined) to detect null dereferences"
    },
    {
      "id": "null-pointer-dereference",
      "cwe": "CWE-476",
      "vulnerability_type": "Null Pointer Dereference Risk",
      "severity": "High",
      "category": "sanitizer",
      "description": "Pointer dereference without null check (Google Sanitizers: UndefinedBehavior)",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 49,
      "column": 12,
      "source_code": "if (*it == 3) {",
      "recommendation": "Use UndefinedBehaviorSanitizer (-fsanitize=undefined) to detect null dereferences"
    },
    {
      "id": "null-pointer-dereference",
      "cwe": "CWE-476",
      "vulnerability_type": "Null Pointer Dereference Risk",
      "severity": "High",
      "category": "sanitizer",
      "description": "Pointer dereference without null check (Google Sanitizers: UndefinedBehavior)",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 60,
      "column": 17,
      "source_code": "std::cout << *result << std::endl;  // Potential dereference of end() iterator",
      "recommendation": "Use UndefinedBehaviorSanitizer (-fsanitize=undefined) to detect null dereferences"
    },
    {
      "id": "null-pointer-dereference",
      "cwe": "CWE-476",
      "vulnerability_type": "Null Pointer Dereference Risk",
      "severity": "High",
      "category": "sanitizer",
      "description": "Pointer dereference without null check (Google Sanitizers: UndefinedBehavior)",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 66,
      "column": 7,
      "source_code": "int* int_ptr = &value;",
      "recommendation": "Use UndefinedBehaviorSanitizer (-fsanitize=undefined) to detect null dereferences"
    },
    {
      "id": "null-pointer-dereference",
      "cwe": "CWE-476",
      "vulnerability_type": "Null Pointer Dereference Risk",
      "severity": "High",
      "category": "sanitizer",
      "description": "Pointer dereference without null check (Google Sanitizers: UndefinedBehavior)",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 68,
      "column": 8,
      "source_code": "char* char_ptr = static_cast<char*>(static_cast<void*>(int_ptr));  // Dangerous cast",
      "recommendation": "Use UndefinedBehaviorSanitizer (-fsanitize=undefined) to detect null dereferences"
    },
    {
      "id": "null-pointer-dereference",
      "cwe": "CWE-476",
      "vulnerability_type": "Null Pointer Dereference Risk",
      "severity": "High",
      "category": "sanitizer",
      "description": "Pointer dereference without null check (Google Sanitizers: UndefinedBehavior)",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 69,
      "column": 4,
      "source_code": "*char_ptr = 'A';  // Potential undefined behavior",
      "recommendation": "Use UndefinedBehaviorSanitizer (-fsanitize=undefined) to detect null dereferences"
    },
    {
      "id": "null-pointer-dereference",
      "cwe": "CWE-476",
      "vulnerability_type": "Null Pointer Dereference Risk",
      "severity": "High",
      "category": "sanitizer",
      "description": "Pointer dereference without null check (Google Sanitizers: UndefinedBehavior)",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 75,
      "column": 8,
      "source_code": "char* bytes = reinterpret_cast<char*>(&number);  // Very dangerous cast",
      "recommendation": "Use UndefinedBehaviorSanitizer (-fsanitize=undefined) to detect null dereferences"
    },
    {
      "id": "null-pointer-dereference",
      "cwe": "CWE-476",
      "vulnerability_type": "Null Pointer Dereference Risk",
      "severity": "High",
      "category": "sanitizer",
      "description": "Pointer dereference without null check (Google Sanitizers: UndefinedBehavior)",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 84,
      "column": 8,
      "source_code": "char* buffer;",
      "recommendation": "Use UndefinedBehaviorSanitizer (-fsanitize=undefined) to detect null dereferences"
    },
    {
      "id": "null-pointer-dereference",
      "cwe": "CWE-476",
      "vulnerability_type": "Null Pointer Dereference Risk",
      "severity": "High",
      "category": "sanitizer",
      "description": "Pointer dereference without null check (Google Sanitizers: UndefinedBehavior)",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 96,
      "column": 29,
      "source_code": "void copy_data(const char* source) {",
      "recommendation": "Use UndefinedBehaviorSanitizer (-fsanitize=undefined) to detect null dereferences"
    },
    {
      "id": "memory-leak-risk",
      "cwe": "CWE-401",
      "vulnerability_type": "Memory Leak Risk",
      "severity": "Medium",
      "category": "sanitizer",
      "description": "Dynamic memory allocation without corresponding free() (Google Sanitizers: LeakSanitizer)",
      "file_path": "test_suite/samples/vulnerable.cpp",
      "line_number": 16,
      "column": 26,
      "source_code": "char* buffer = (char*)malloc(512);",
      "recommendation": "Use LeakSanitizer (-fsanitize=leak) to detect memory leaks"
    },
    {
      "id": "TS001",
      "cwe": "CWE-79",
      "vulnerability_type": "Cross-Site Scripting (XSS)",
      "severity": "High",
      "category": "injection",
      "description": "Potential Cross-Site Scripting (XSS) vulnerability",
      "file_path": "test_suite/samples/vulnerable.ts",
      "line_number": 20,
      "column": 0,
      "source_code": "    document.getElementById('output')!.innerHTML = '<div>' + userInput + '</div>';",
      "recommendation": "Sanitize user input before inserting into DOM. Use textContent instead of innerHTML where possible"
    },
    {
      "id": "TS005",
      "cwe": "CWE-94",
      "vulnerability_type": "Code Injection",
      "severity": "Critical",
      "category": "injection",
      "description": "Code execution via eval() or dynamic code execution",
      "file_path": "test_suite/samples/vulnerable.ts",
      "line_number": 30,
      "column": 0,
      "source_code": "    eval(code);",
      "recommendation": "Avoid eval(), Function constructor, and dynamic imports with user input. Use safer alternatives"
    },
    {
      "id": "TS008",
      "cwe": "CWE-327",
      "vulnerability_type": "Weak Cryptography",
      "severity": "Medium",
      "category": "cryptographic",
      "description": "Insecure random number generation",
      "file_path": "test_suite/samples/vulnerable.ts",
      "line_number": 25,
      "column": 0,
      "source_code": "    return Math.random().toString(36);",
      "recommendation": "Use crypto.getRandomValues() for cryptographic purposes"
    },
    {
      "id": "TS012",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "High",
      "category": "authentication",
      "description": "Hardcoded secrets or credentials detected",
      "file_path": "test_suite/samples/vulnerable.ts",
      "line_number": 9,
      "column": 0,
      "source_code": "const API_KEY = \"sk-1234567890abcdef1234567890abcdef\";",
      "recommendation": "Store secrets in environment variables or secure vaults, never in source code"
    },
    {
      "id": "TS012",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "High",
      "category": "authentication",
      "description": "Hardcoded secrets or credentials detected",
      "file_path": "test_suite/samples/vulnerable.ts",
      "line_number": 10,
      "column": 0,
      "source_code": "const authToken = \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\";",
      "recommendation": "Store secrets in environment variables or secure vaults, never in source code"
    },
    {
      "id": "TS014",
      "cwe": "CWE-704",
      "vulnerability_type": "Use of Any Type",
      "severity": "Low",
      "category": "validation",
      "description": "Usage of 'any' type defeats TypeScript benefits",
      "file_path": "test_suite/samples/vulnerable.ts",
      "line_number": 13,
      "column": 0,
      "source_code": "function processData(data: any): void {",
      "recommendation": "Use specific types instead of 'any' to maintain type safety"
    },
    {
      "id": "TS014",
      "cwe": "CWE-704",
      "vulnerability_type": "Use of Any Type",
      "severity": "Low",
      "category": "validation",
      "description": "Usage of 'any' type defeats TypeScript benefits",
      "file_path": "test_suite/samples/vulnerable.ts",
      "line_number": 13,
      "column": 0,
      "source_code": "function processData(data: any): void {",
      "recommendation": "Use specific types instead of 'any' to maintain type safety"
    },
    {
      "id": "TS013",
      "cwe": "CWE-704",
      "vulnerability_type": "Unsafe Type Assertion",
      "severity": "Medium",
      "category": "validation",
      "description": "Unsafe type assertion bypassing TypeScript type checking",
      "file_path": "test_suite/samples/vulnerable.ts",
      "line_number": 14,
      "column": 0,
      "source_code": "    const user = data as any;",
      "recommendation": "Avoid 'as any' and unsafe type assertions. Use proper type guards and validation"
    },
    {
      "id": "TS021",
      "cwe": "CWE-476",
      "vulnerability_type": "Null Pointer Dereference Risk",
      "severity": "Medium",
      "category": "validation",
      "description": "Non-null assertion operator may cause runtime errors",
      "file_path": "test_suite/samples/vulnerable.ts",
      "line_number": 14,
      "column": 0,
      "source_code": "    const user = data as any;",
      "recommendation": "Use proper null checks instead of non-null assertion operator"
    },
    {
      "id": "TS014",
      "cwe": "CWE-704",
      "vulnerability_type": "Use of Any Type",
      "severity": "Low",
      "category": "validation",
      "description": "Usage of 'any' type defeats TypeScript benefits",
      "file_path": "test_suite/samples/vulnerable.ts",
      "line_number": 34,
      "column": 0,
      "source_code": "function redirect(req: any, res: any): void {",
      "recommendation": "Use specific types instead of 'any' to maintain type safety"
    },
    {
      "id": "TS014",
      "cwe": "CWE-704",
      "vulnerability_type": "Use of Any Type",
      "severity": "Low",
      "category": "validation",
      "description": "Usage of 'any' type defeats TypeScript benefits",
      "file_path": "test_suite/samples/vulnerable.ts",
      "line_number": 34,
      "column": 0,
      "source_code": "function redirect(req: any, res: any): void {",
      "recommendation": "Use specific types instead of 'any' to maintain type safety"
    },
    {
      "id": "TS013",
      "cwe": "CWE-704",
      "vulnerability_type": "Unsafe Type Assertion",
      "severity": "Medium",
      "category": "validation",
      "description": "Unsafe type assertion bypassing TypeScript type checking",
      "file_path": "test_suite/samples/vulnerable.ts",
      "line_number": 39,
      "column": 0,
      "source_code": "async function findUser(req: any): Promise<User[]> {",
      "recommendation": "Avoid 'as any' and unsafe type assertions. Use proper type guards and validation"
    },
    {
      "id": "TS014",
      "cwe": "CWE-704",
      "vulnerability_type": "Use of Any Type",
      "severity": "Low",
      "category": "validation",
      "description": "Usage of 'any' type defeats TypeScript benefits",
      "file_path": "test_suite/samples/vulnerable.ts",
      "line_number": 39,
      "column": 0,
      "source_code": "async function findUser(req: any): Promise<User[]> {",
      "recommendation": "Use specific types instead of 'any' to maintain type safety"
    },
    {
      "id": "TS014",
      "cwe": "CWE-704",
      "vulnerability_type": "Use of Any Type",
      "severity": "Low",
      "category": "validation",
      "description": "Usage of 'any' type defeats TypeScript benefits",
      "file_path": "test_suite/samples/vulnerable.ts",
      "line_number": 39,
      "column": 0,
      "source_code": "async function findUser(req: any): Promise<User[]> {",
      "recommendation": "Use specific types instead of 'any' to maintain type safety"
    },
    {
      "id": "TS014",
      "cwe": "CWE-704",
      "vulnerability_type": "Use of Any Type",
      "severity": "Low",
      "category": "validation",
      "description": "Usage of 'any' type defeats TypeScript benefits",
      "file_path": "test_suite/samples/vulnerable.ts",
      "line_number": 44,
      "column": 0,
      "source_code": "function mergeObjects(target: any, source: any): any {",
      "recommendation": "Use specific types instead of 'any' to maintain type safety"
    },
    {
      "id": "TS014",
      "cwe": "CWE-704",
      "vulnerability_type": "Use of Any Type",
      "severity": "Low",
      "category": "validation",
      "description": "Usage of 'any' type defeats TypeScript benefits",
      "file_path": "test_suite/samples/vulnerable.ts",
      "line_number": 44,
      "column": 0,
      "source_code": "function mergeObjects(target: any, source: any): any {",
      "recommendation": "Use specific types instead of 'any' to maintain type safety"
    },
    {
      "id": "TS017",
      "cwe": "CWE-943",
      "vulnerability_type": "NoSQL Injection",
      "severity": "High",
      "category": "injection",
      "description": "Potential NoSQL injection vulnerability",
      "file_path": "test_suite/samples/vulnerable.ts",
      "line_number": 40,
      "column": 0,
      "source_code": "    return await db.collection('users').find(req.body.query).toArray();",
      "recommendation": "Sanitize and validate user input for NoSQL queries. Use parameterized queries and input validation"
    },
    {
      "id": "hardcoded-encryption-key",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Encryption Key",
      "severity": "Critical",
      "category": "security",
      "description": "Hardcoded encryption key or secret detected - A02:2021 – Cryptographic Failures",
      "file_path": "test_suite/samples/vulnerable.ts",
      "line_number": 9,
      "column": 10,
      "source_code": "const API_KEY = \"sk-1234567890abcdef1234567890abcdef\";",
      "recommendation": "Use secure key management systems and environment variables"
    },
    {
      "id": "weak-random-generator",
      "cwe": "CWE-338",
      "vulnerability_type": "Weak Random Number Generator",
      "severity": "Medium",
      "category": "security",
      "description": "Weak random number generator used for security purposes - A02:2021 – Cryptographic Failures",
      "file_path": "test_suite/samples/vulnerable.ts",
      "line_number": 25,
      "column": 11,
      "source_code": "return Math.random().toString(36);",
      "recommendation": "Use cryptographically secure random number generators (secrets module in Python, crypto.randomBytes in Node.js)"
    },
    {
      "id": "cwe-79-xss",
      "cwe": "CWE-79",
      "vulnerability_type": "Cross-site Scripting (XSS)",
      "severity": "High",
      "category": "vulnerability",
      "description": "Potential XSS vulnerability through DOM manipulation - A03:2021 - Injection",
      "file_path": "test_suite/samples/vulnerable.ts",
      "line_number": 20,
      "column": 39,
      "source_code": "document.getElementById('output')!.innerHTML = '<div>' + userInput + '</div>';",
      "recommendation": "Use safe DOM manipulation methods or sanitize user input"
    },
    {
      "id": "PY001",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "Critical",
      "category": "authentication",
      "description": "Hardcoded secret or credential detected",
      "file_path": "test_suite/samples/vulnerable.py",
      "line_number": 9,
      "column": 0,
      "source_code": "API_KEY = \"sk-1234567890abcdef1234567890abcdef\"",
      "recommendation": "Use environment variables or secure credential management systems"
    },
    {
      "id": "PY001",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "Critical",
      "category": "authentication",
      "description": "Hardcoded secret or credential detected",
      "file_path": "test_suite/samples/vulnerable.py",
      "line_number": 9,
      "column": 0,
      "source_code": "API_KEY = \"sk-1234567890abcdef1234567890abcdef\"",
      "recommendation": "Use environment variables or secure credential management systems"
    },
    {
      "id": "PY001",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "Critical",
      "category": "authentication",
      "description": "Hardcoded secret or credential detected",
      "file_path": "test_suite/samples/vulnerable.py",
      "line_number": 10,
      "column": 0,
      "source_code": "DATABASE_PASSWORD = \"admin123\"",
      "recommendation": "Use environment variables or secure credential management systems"
    },
    {
      "id": "PY001",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "Critical",
      "category": "authentication",
      "description": "Hardcoded secret or credential detected",
      "file_path": "test_suite/samples/vulnerable.py",
      "line_number": 11,
      "column": 0,
      "source_code": "SECRET_TOKEN = \"very_secret_token_12345\"",
      "recommendation": "Use environment variables or secure credential management systems"
    },
    {
      "id": "PY002",
      "cwe": "CWE-89",
      "vulnerability_type": "SQL Injection",
      "severity": "High",
      "category": "injection",
      "description": "Potential SQL injection vulnerability detected",
      "file_path": "test_suite/samples/vulnerable.py",
      "line_number": 18,
      "column": 0,
      "source_code": "query = f\"SELECT * FROM users WHERE id = {user_id}\"",
      "recommendation": "Use parameterized queries or prepared statements"
    },
    {
      "id": "PY003",
      "cwe": "CWE-78",
      "vulnerability_type": "Command Injection",
      "severity": "High",
      "category": "injection",
      "description": "Potential command injection vulnerability detected",
      "file_path": "test_suite/samples/vulnerable.py",
      "line_number": 31,
      "column": 0,
      "source_code": "subprocess.run(f\"python {script_name}\", shell=True)",
      "recommendation": "Validate and sanitize input, use subprocess with shell=False"
    },
    {
      "id": "PY003",
      "cwe": "CWE-95",
      "vulnerability_type": "Code Injection",
      "severity": "Critical",
      "category": "injection",
      "description": "Potential command injection vulnerability detected",
      "file_path": "test_suite/samples/vulnerable.py",
      "line_number": 51,
      "column": 0,
      "source_code": "result = eval(expression)",
      "recommendation": "Validate and sanitize input, use subprocess with shell=False"
    },
    {
      "id": "PY003",
      "cwe": "CWE-95",
      "vulnerability_type": "Code Injection",
      "severity": "Critical",
      "category": "injection",
      "description": "Potential command injection vulnerability detected",
      "file_path": "test_suite/samples/vulnerable.py",
      "line_number": 56,
      "column": 0,
      "source_code": "exec(code)",
      "recommendation": "Validate and sanitize input, use subprocess with shell=False"
    },
    {
      "id": "PY004",
      "cwe": "CWE-502",
      "vulnerability_type": "Unsafe Deserialization",
      "severity": "Critical",
      "category": "deserialization",
      "description": "Unsafe deserialization detected",
      "file_path": "test_suite/samples/vulnerable.py",
      "line_number": 36,
      "column": 0,
      "source_code": "return pickle.loads(data)",
      "recommendation": "Use safe serialization formats like JSON, avoid pickle with untrusted data"
    },
    {
      "id": "PY005",
      "cwe": "CWE-327",
      "vulnerability_type": "Weak Cryptography",
      "severity": "Medium",
      "category": "cryptographic",
      "description": "Weak cryptographic algorithm detected",
      "file_path": "test_suite/samples/vulnerable.py",
      "line_number": 41,
      "column": 0,
      "source_code": "return hashlib.md5(password.encode()).hexdigest()",
      "recommendation": "Use stronger hashing algorithms like SHA-256 or SHA-3"
    },
    {
      "id": "PY005",
      "cwe": "CWE-327",
      "vulnerability_type": "Weak Cryptography",
      "severity": "Medium",
      "category": "cryptographic",
      "description": "Weak cryptographic algorithm detected",
      "file_path": "test_suite/samples/vulnerable.py",
      "line_number": 46,
      "column": 0,
      "source_code": "return hashlib.sha1(data.encode()).hexdigest()",
      "recommendation": "Use stronger hashing algorithms like SHA-256 or SHA-3"
    },
    {
      "id": "hardcoded-encryption-key",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Encryption Key",
      "severity": "Critical",
      "category": "security",
      "description": "Hardcoded encryption key or secret detected - A02:2021 – Cryptographic Failures",
      "file_path": "test_suite/samples/vulnerable.py",
      "line_number": 9,
      "column": 4,
      "source_code": "API_KEY = \"sk-1234567890abcdef1234567890abcdef\"",
      "recommendation": "Use secure key management systems and environment variables"
    },
    {
      "id": "weak-hash-algorithm",
      "cwe": "CWE-327",
      "vulnerability_type": "Weak Hash Algorithm",
      "severity": "High",
      "category": "security",
      "description": "Weak cryptographic hash algorithm detected - A02:2021 – Cryptographic Failures",
      "file_path": "test_suite/samples/vulnerable.py",
      "line_number": 41,
      "column": 11,
      "source_code": "return hashlib.md5(password.encode()).hexdigest()",
      "recommendation": "Use secure hash algorithms like SHA-256, SHA-3, or bcrypt for passwords"
    },
    {
      "id": "weak-hash-algorithm",
      "cwe": "CWE-327",
      "vulnerability_type": "Weak Hash Algorithm",
      "severity": "High",
      "category": "security",
      "description": "Weak cryptographic hash algorithm detected - A02:2021 – Cryptographic Failures",
      "file_path": "test_suite/samples/vulnerable.py",
      "line_number": 46,
      "column": 11,
      "source_code": "return hashlib.sha1(data.encode()).hexdigest()",
      "recommendation": "Use secure hash algorithms like SHA-256, SHA-3, or bcrypt for passwords"
    },
    {
      "id": "debug-mode-enabled",
      "cwe": "CWE-489",
      "vulnerability_type": "Debug Mode Enabled",
      "severity": "Medium",
      "category": "security",
      "description": "Debug mode enabled in production code detected - A05:2021 – Security Misconfiguration",
      "file_path": "test_suite/samples/vulnerable.py",
      "line_number": 59,
      "column": 0,
      "source_code": "DEBUG = True",
      "recommendation": "Disable debug mode in production environments"
    },
    {
      "id": "cwe-798-hardcoded-credentials",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Hardcoded credentials detected - A07:2021 - Identification and Authentication Failures",
      "file_path": "test_suite/samples/vulnerable.py",
      "line_number": 9,
      "column": 4,
      "source_code": "API_KEY = \"sk-1234567890abcdef1234567890abcdef\"",
      "recommendation": "Use environment variables or secure configuration management"
    },
    {
      "id": "cwe-798-hardcoded-credentials",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Hardcoded credentials detected - A07:2021 - Identification and Authentication Failures",
      "file_path": "test_suite/samples/vulnerable.py",
      "line_number": 10,
      "column": 9,
      "source_code": "DATABASE_PASSWORD = \"admin123\"",
      "recommendation": "Use environment variables or secure configuration management"
    },
    {
      "id": "cwe-798-hardcoded-credentials",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Hardcoded credentials detected - A07:2021 - Identification and Authentication Failures",
      "file_path": "test_suite/samples/vulnerable.py",
      "line_number": 11,
      "column": 7,
      "source_code": "SECRET_TOKEN = \"very_secret_token_12345\"",
      "recommendation": "Use environment variables or secure configuration management"
    },
    {
      "id": "cwe-89-sql-injection",
      "cwe": "CWE-89",
      "vulnerability_type": "SQL Injection",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "SQL injection vulnerability through string interpolation - A03:2021 - Injection",
      "file_path": "test_suite/samples/vulnerable.py",
      "line_number": 18,
      "column": 14,
      "source_code": "query = f\"SELECT * FROM users WHERE id = {user_id}\"",
      "recommendation": "Use parameterized queries or prepared statements"
    },
    {
      "id": "owasp-a08-integrity-failures",
      "cwe": "CWE-502",
      "vulnerability_type": "Software and Data Integrity Failures",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Unsafe deserialization of user input detected - A08:2021 - Software and Data Integrity Failures",
      "file_path": "test_suite/samples/vulnerable.py",
      "line_number": 23,
      "column": 4,
      "source_code": "def execute_command(user_input):",
      "recommendation": "Use safe deserialization methods and validate input"
    },
    {
      "id": "owasp-a08-integrity-failures",
      "cwe": "CWE-502",
      "vulnerability_type": "Software and Data Integrity Failures",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Unsafe deserialization of user input detected - A08:2021 - Software and Data Integrity Failures",
      "file_path": "test_suite/samples/vulnerable.py",
      "line_number": 50,
      "column": 18,
      "source_code": "# Vulnerable: eval with user input",
      "recommendation": "Use safe deserialization methods and validate input"
    },
    {
      "id": "owasp-a08-integrity-failures",
      "cwe": "CWE-502",
      "vulnerability_type": "Software and Data Integrity Failures",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Unsafe deserialization of user input detected - A08:2021 - Software and Data Integrity Failures",
      "file_path": "test_suite/samples/vulnerable.py",
      "line_number": 55,
      "column": 18,
      "source_code": "# Vulnerable: exec with user input",
      "recommendation": "Use safe deserialization methods and validate input"
    },
    {
      "id": "C001",
      "cwe": "CWE-120",
      "vulnerability_type": "Buffer Overflow",
      "severity": "High",
      "category": "injection",
      "description": "Potential buffer overflow vulnerability detected",
      "file_path": "test_suite/samples/vulnerable.c",
      "line_number": 8,
      "column": 0,
      "source_code": "    strcpy(buffer, input);  // Vulnerable: no bounds checking",
      "recommendation": "Use safe string functions like strncpy, strncat, or snprintf with proper bounds checking"
    },
    {
      "id": "C001",
      "cwe": "CWE-120",
      "vulnerability_type": "Buffer Overflow",
      "severity": "High",
      "category": "injection",
      "description": "Potential buffer overflow vulnerability detected",
      "file_path": "test_suite/samples/vulnerable.c",
      "line_number": 33,
      "column": 0,
      "source_code": "    gets(input);  // Vulnerable: gets() is unsafe",
      "recommendation": "Use safe string functions like strncpy, strncat, or snprintf with proper bounds checking"
    },
    {
      "id": "C002",
      "cwe": "CWE-134",
      "vulnerability_type": "Format String Vulnerability",
      "severity": "Medium",
      "category": "injection",
      "description": "Potential format string vulnerability detected",
      "file_path": "test_suite/samples/vulnerable.c",
      "line_number": 14,
      "column": 0,
      "source_code": "    printf(user_input);  // Vulnerable: user input used as format string",
      "recommendation": "Always use format specifiers with printf family functions"
    },
    {
      "id": "C002",
      "cwe": "CWE-134",
      "vulnerability_type": "Format String Vulnerability",
      "severity": "Medium",
      "category": "injection",
      "description": "Potential format string vulnerability detected",
      "file_path": "test_suite/samples/vulnerable.c",
      "line_number": 32,
      "column": 0,
      "source_code": "    printf(\"Enter data: \");",
      "recommendation": "Always use format specifiers with printf family functions"
    },
    {
      "id": "C005",
      "cwe": "CWE-120",
      "vulnerability_type": "Unsafe Function Usage",
      "severity": "High",
      "category": "injection",
      "description": "Usage of unsafe function: strcpy",
      "file_path": "test_suite/samples/vulnerable.c",
      "line_number": 8,
      "column": 0,
      "source_code": "    strcpy(buffer, input);  // Vulnerable: no bounds checking",
      "recommendation": "Use safe alternatives like strncpy, strncat, snprintf, or fgets instead of unsafe C functions"
    },
    {
      "id": "C005",
      "cwe": "CWE-120",
      "vulnerability_type": "Unsafe Function Usage",
      "severity": "High",
      "category": "injection",
      "description": "Usage of unsafe function: gets",
      "file_path": "test_suite/samples/vulnerable.c",
      "line_number": 33,
      "column": 0,
      "source_code": "    gets(input);  // Vulnerable: gets() is unsafe",
      "recommendation": "Use safe alternatives like strncpy, strncat, snprintf, or fgets instead of unsafe C functions"
    },
    {
      "id": "cwe-125-buffer-overflow",
      "cwe": "CWE-125",
      "vulnerability_type": "Buffer Overflow",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Buffer overflow vulnerability from unsafe function usage - A06:2021 - Vulnerable and Outdated Components",
      "file_path": "test_suite/samples/vulnerable.c",
      "line_number": 8,
      "column": 4,
      "source_code": "strcpy(buffer, input);  // Vulnerable: no bounds checking",
      "recommendation": "Use safe alternatives: strncpy, strncat, snprintf, fgets"
    },
    {
      "id": "cwe-125-buffer-overflow",
      "cwe": "CWE-125",
      "vulnerability_type": "Buffer Overflow",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Buffer overflow vulnerability from unsafe function usage - A06:2021 - Vulnerable and Outdated Components",
      "file_path": "test_suite/samples/vulnerable.c",
      "line_number": 33,
      "column": 4,
      "source_code": "gets(input);  // Vulnerable: gets() is unsafe",
      "recommendation": "Use safe alternatives: strncpy, strncat, snprintf, fgets"
    },
    {
      "id": "c-format-string",
      "cwe": "CWE-134",
      "vulnerability_type": "Format String Vulnerability",
      "severity": "High",
      "category": "vulnerability",
      "description": "Format string vulnerability detected - A03:2021 - Injection",
      "file_path": "test_suite/samples/vulnerable.c",
      "line_number": 14,
      "column": 4,
      "source_code": "printf(user_input);  // Vulnerable: user input used as format string",
      "recommendation": "Always use format specifiers with printf family functions"
    },
    {
      "id": "c-format-string",
      "cwe": "CWE-134",
      "vulnerability_type": "Format String Vulnerability",
      "severity": "High",
      "category": "vulnerability",
      "description": "Format string vulnerability detected - A03:2021 - Injection",
      "file_path": "test_suite/samples/vulnerable.c",
      "line_number": 32,
      "column": 4,
      "source_code": "printf(\"Enter data: \");",
      "recommendation": "Always use format specifiers with printf family functions"
    },
    {
      "id": "array-bounds-risk",
      "cwe": "CWE-125",
      "vulnerability_type": "Array Bounds Risk",
      "severity": "Medium",
      "category": "sanitizer",
      "description": "Array access without bounds checking - AddressSanitizer recommended (Google Sanitizers: AddressSanitizer)",
      "file_path": "test_suite/samples/vulnerable.c",
      "line_number": 7,
      "column": 9,
      "source_code": "char buffer[10];",
      "recommendation": "Use AddressSanitizer (-fsanitize=address) to detect out-of-bounds access"
    },
    {
      "id": "buffer-overflow-risk",
      "cwe": "CWE-120",
      "vulnerability_type": "Buffer Overflow Risk",
      "severity": "Critical",
      "category": "sanitizer",
      "description": "Function prone to buffer overflow - AddressSanitizer recommended (Google Sanitizers: AddressSanitizer)",
      "file_path": "test_suite/samples/vulnerable.c",
      "line_number": 8,
      "column": 4,
      "source_code": "strcpy(buffer, input);  // Vulnerable: no bounds checking",
      "recommendation": "Use AddressSanitizer (-fsanitize=address) to detect buffer overflows at runtime"
    },
    {
      "id": "array-bounds-risk",
      "cwe": "CWE-125",
      "vulnerability_type": "Array Bounds Risk",
      "severity": "Medium",
      "category": "sanitizer",
      "description": "Array access without bounds checking - AddressSanitizer recommended (Google Sanitizers: AddressSanitizer)",
      "file_path": "test_suite/samples/vulnerable.c",
      "line_number": 31,
      "column": 9,
      "source_code": "char input[100];",
      "recommendation": "Use AddressSanitizer (-fsanitize=address) to detect out-of-bounds access"
    },
    {
      "id": "buffer-overflow-risk",
      "cwe": "CWE-120",
      "vulnerability_type": "Buffer Overflow Risk",
      "severity": "Critical",
      "category": "sanitizer",
      "description": "Function prone to buffer overflow - AddressSanitizer recommended (Google Sanitizers: AddressSanitizer)",
      "file_path": "test_suite/samples/vulnerable.c",
      "line_number": 33,
      "column": 4,
      "source_code": "gets(input);  // Vulnerable: gets() is unsafe",
      "recommendation": "Use AddressSanitizer (-fsanitize=address) to detect buffer overflows at runtime"
    },
    {
      "id": "null-pointer-dereference",
      "cwe": "CWE-476",
      "vulnerability_type": "Null Pointer Dereference Risk",
      "severity": "High",
      "category": "sanitizer",
      "description": "Pointer dereference without null check (Google Sanitizers: UndefinedBehavior)",
      "file_path": "test_suite/samples/vulnerable.c",
      "line_number": 6,
      "column": 21,
      "source_code": "void unsafe_copy(char* input) {",
      "recommendation": "Use UndefinedBehaviorSanitizer (-fsanitize=undefined) to detect null dereferences"
    },
    {
      "id": "null-pointer-dereference",
      "cwe": "CWE-476",
      "vulnerability_type": "Null Pointer Dereference Risk",
      "severity": "High",
      "category": "sanitizer",
      "description": "Pointer dereference without null check (Google Sanitizers: UndefinedBehavior)",
      "file_path": "test_suite/samples/vulnerable.c",
      "line_number": 13,
      "column": 22,
      "source_code": "void unsafe_print(char* user_input) {",
      "recommendation": "Use UndefinedBehaviorSanitizer (-fsanitize=undefined) to detect null dereferences"
    },
    {
      "id": "null-pointer-dereference",
      "cwe": "CWE-476",
      "vulnerability_type": "Null Pointer Dereference Risk",
      "severity": "High",
      "category": "sanitizer",
      "description": "Pointer dereference without null check (Google Sanitizers: UndefinedBehavior)",
      "file_path": "test_suite/samples/vulnerable.c",
      "line_number": 19,
      "column": 28,
      "source_code": "int result = user_value * 1024;  // Vulnerable: no overflow check",
      "recommendation": "Use UndefinedBehaviorSanitizer (-fsanitize=undefined) to detect null dereferences"
    },
    {
      "id": "null-pointer-dereference",
      "cwe": "CWE-476",
      "vulnerability_type": "Null Pointer Dereference Risk",
      "severity": "High",
      "category": "sanitizer",
      "description": "Pointer dereference without null check (Google Sanitizers: UndefinedBehavior)",
      "file_path": "test_suite/samples/vulnerable.c",
      "line_number": 24,
      "column": 22,
      "source_code": "void process_data(char* data) {",
      "recommendation": "Use UndefinedBehaviorSanitizer (-fsanitize=undefined) to detect null dereferences"
    },
    {
      "id": "TS008",
      "cwe": "CWE-327",
      "vulnerability_type": "Weak Cryptography",
      "severity": "Medium",
      "category": "cryptographic",
      "description": "Insecure random number generation",
      "file_path": "test_suite/samples/vulnerable.tsx",
      "line_number": 31,
      "column": 0,
      "source_code": "    return Math.random().toString(36).substring(2);",
      "recommendation": "Use crypto.getRandomValues() for cryptographic purposes"
    },
    {
      "id": "TS012",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "High",
      "category": "authentication",
      "description": "Hardcoded secrets or credentials detected",
      "file_path": "test_suite/samples/vulnerable.tsx",
      "line_number": 25,
      "column": 0,
      "source_code": "    apiKey: \"AIzaSyDOCAbC123dEf456GhI789jKl01MnO2PqR\",",
      "recommendation": "Store secrets in environment variables or secure vaults, never in source code"
    },
    {
      "id": "TS012",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "High",
      "category": "authentication",
      "description": "Hardcoded secrets or credentials detected",
      "file_path": "test_suite/samples/vulnerable.tsx",
      "line_number": 26,
      "column": 0,
      "source_code": "    secret: \"super-secret-key-12345\"",
      "recommendation": "Store secrets in environment variables or secure vaults, never in source code"
    },
    {
      "id": "TS013",
      "cwe": "CWE-704",
      "vulnerability_type": "Unsafe Type Assertion",
      "severity": "Medium",
      "category": "validation",
      "description": "Unsafe type assertion bypassing TypeScript type checking",
      "file_path": "test_suite/samples/vulnerable.tsx",
      "line_number": 10,
      "column": 0,
      "source_code": "    const user = userData as any; // Unsafe type assertion",
      "recommendation": "Avoid 'as any' and unsafe type assertions. Use proper type guards and validation"
    },
    {
      "id": "TS021",
      "cwe": "CWE-476",
      "vulnerability_type": "Null Pointer Dereference Risk",
      "severity": "Medium",
      "category": "validation",
      "description": "Non-null assertion operator may cause runtime errors",
      "file_path": "test_suite/samples/vulnerable.tsx",
      "line_number": 10,
      "column": 0,
      "source_code": "    const user = userData as any; // Unsafe type assertion",
      "recommendation": "Use proper null checks instead of non-null assertion operator"
    },
    {
      "id": "weak-random-generator",
      "cwe": "CWE-338",
      "vulnerability_type": "Weak Random Number Generator",
      "severity": "Medium",
      "category": "security",
      "description": "Weak random number generator used for security purposes - A02:2021 – Cryptographic Failures",
      "file_path": "test_suite/samples/vulnerable.tsx",
      "line_number": 31,
      "column": 11,
      "source_code": "return Math.random().toString(36).substring(2);",
      "recommendation": "Use cryptographically secure random number generators (secrets module in Python, crypto.randomBytes in Node.js)"
    },
    {
      "id": "RUBY-SQL-001",
      "cwe": "CWE-89",
      "vulnerability_type": "SQL Injection",
      "severity": "High",
      "category": "injection",
      "description": "SQL injection vulnerability detected in Ruby database query",
      "file_path": "test_suite/samples/vulnerable.rb",
      "line_number": 19,
      "column": 0,
      "source_code": "    connection.execute(\"SELECT * FROM users WHERE id = #{id}\")",
      "recommendation": "Use parameterized queries: User.where('name = ?', params[:name])"
    },
    {
      "id": "RUBY-CMD-001",
      "cwe": "CWE-78",
      "vulnerability_type": "Command Injection",
      "severity": "High",
      "category": "injection",
      "description": "Command injection vulnerability detected in Ruby system call",
      "file_path": "test_suite/samples/vulnerable.rb",
      "line_number": 31,
      "column": 0,
      "source_code": "  system(\"echo #{user_input}\")",
      "recommendation": "Use system() with array arguments or validate input: system(['ls', user_input])"
    },
    {
      "id": "RUBY-CMD-001",
      "cwe": "CWE-78",
      "vulnerability_type": "Command Injection",
      "severity": "High",
      "category": "injection",
      "description": "Command injection vulnerability detected in Ruby system call",
      "file_path": "test_suite/samples/vulnerable.rb",
      "line_number": 32,
      "column": 0,
      "source_code": "  `ls #{user_input}`",
      "recommendation": "Use system() with array arguments or validate input: system(['ls', user_input])"
    },
    {
      "id": "RUBY-CMD-001",
      "cwe": "CWE-78",
      "vulnerability_type": "Command Injection",
      "severity": "High",
      "category": "injection",
      "description": "Command injection vulnerability detected in Ruby system call",
      "file_path": "test_suite/samples/vulnerable.rb",
      "line_number": 33,
      "column": 0,
      "source_code": "  exec(\"cat #{user_input}\")",
      "recommendation": "Use system() with array arguments or validate input: system(['ls', user_input])"
    },
    {
      "id": "path-traversal-risk",
      "cwe": "CWE-22",
      "vulnerability_type": "Path Traversal Risk",
      "severity": "High",
      "category": "security",
      "description": "Potential path traversal vulnerability detected - A01:2021 – Broken Access Control",
      "file_path": "test_suite/samples/vulnerable.rb",
      "line_number": 201,
      "column": 13,
      "source_code": "vulnerable_file_operations(\"../../../etc/passwd\")",
      "recommendation": "Validate and sanitize file paths, use os.path.join()"
    },
    {
      "id": "default-credentials",
      "cwe": "CWE-798",
      "vulnerability_type": "Default Credentials",
      "severity": "Critical",
      "category": "security",
      "description": "Default or weak credentials detected - A07:2021 – Identification and Authentication Failures",
      "file_path": "test_suite/samples/vulnerable.rb",
      "line_number": 89,
      "column": 5,
      "source_code": "@admin_password = \"admin123\"",
      "recommendation": "Change default credentials and use strong, unique passwords"
    },
    {
      "id": "ruby-sql-injection",
      "cwe": "CWE-89",
      "vulnerability_type": "SQL Injection (Ruby)",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "SQL injection vulnerability in Ruby - A03:2021 - Injection",
      "file_path": "test_suite/samples/vulnerable.rb",
      "line_number": 14,
      "column": 4,
      "source_code": "where(\"name = '#{user_input}'\")",
      "recommendation": "Use parameterized queries and ActiveRecord methods"
    },
    {
      "id": "ruby-sql-injection",
      "cwe": "CWE-89",
      "vulnerability_type": "SQL Injection (Ruby)",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "SQL injection vulnerability in Ruby - A03:2021 - Injection",
      "file_path": "test_suite/samples/vulnerable.rb",
      "line_number": 24,
      "column": 4,
      "source_code": "find_by_sql(\"SELECT * FROM users WHERE name = '#{name}'\")",
      "recommendation": "Use parameterized queries and ActiveRecord methods"
    },
    {
      "id": "weak-random-generator",
      "cwe": "CWE-338",
      "vulnerability_type": "Weak Random Number Generator",
      "severity": "Medium",
      "category": "security",
      "description": "Weak random number generator used for security purposes - A02:2021 – Cryptographic Failures",
      "file_path": "test_suite/samples/vulnerable.kt",
      "line_number": 13,
      "column": 14,
      "source_code": "import kotlin.random.Random",
      "recommendation": "Use cryptographically secure random number generators (secrets module in Python, crypto.randomBytes in Node.js)"
    },
    {
      "id": "weak-random-generator",
      "cwe": "CWE-338",
      "vulnerability_type": "Weak Random Number Generator",
      "severity": "Medium",
      "category": "security",
      "description": "Weak random number generator used for security purposes - A02:2021 – Cryptographic Failures",
      "file_path": "test_suite/samples/vulnerable.kt",
      "line_number": 88,
      "column": 22,
      "source_code": "val random1 = Math.random()",
      "recommendation": "Use cryptographically secure random number generators (secrets module in Python, crypto.randomBytes in Node.js)"
    },
    {
      "id": "path-traversal-risk",
      "cwe": "CWE-22",
      "vulnerability_type": "Path Traversal Risk",
      "severity": "High",
      "category": "security",
      "description": "Potential path traversal vulnerability detected - A01:2021 – Broken Access Control",
      "file_path": "test_suite/samples/vulnerable.kt",
      "line_number": 197,
      "column": 12,
      "source_code": "val fileContent = vulnerableApp.vulnerableFileOperations(\"../../../etc/passwd\")",
      "recommendation": "Validate and sanitize file paths, use os.path.join()"
    },
    {
      "id": "default-credentials",
      "cwe": "CWE-798",
      "vulnerability_type": "Default Credentials",
      "severity": "Critical",
      "category": "security",
      "description": "Default or weak credentials detected - A07:2021 – Identification and Authentication Failures",
      "file_path": "test_suite/samples/vulnerable.kt",
      "line_number": 74,
      "column": 20,
      "source_code": "private val adminPassword = \"admin123\"",
      "recommendation": "Change default credentials and use strong, unique passwords"
    },
    {
      "id": "insufficient-logging",
      "cwe": "CWE-778",
      "vulnerability_type": "Insufficient Security Logging",
      "severity": "Low",
      "category": "security",
      "description": "Authentication failure without proper logging detected - A09:2021 – Security Logging and Monitoring Failures",
      "file_path": "test_suite/samples/vulnerable.kt",
      "line_number": 200,
      "column": 22,
      "source_code": "println(\"File access error: ${e.message}\")",
      "recommendation": "Implement comprehensive security logging and monitoring"
    },
    {
      "id": "SCADA001",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Credentials",
      "severity": "Critical",
      "category": "authentication",
      "description": "Hardcoded credentials detected in SCADA code",
      "file_path": "test_suite/samples/vulnerable.sl",
      "line_number": 115,
      "column": 0,
      "source_code": "SYSTEM_PASSWORD := 'admin';",
      "recommendation": "Use secure credential management and avoid hardcoded passwords"
    },
    {
      "id": "SCADA008",
      "cwe": "CWE-1188",
      "vulnerability_type": "Default Configuration",
      "severity": "Low",
      "category": "authentication",
      "description": "Default configuration detected",
      "file_path": "test_suite/samples/vulnerable.sl",
      "line_number": 112,
      "column": 0,
      "source_code": "// Default configuration vulnerabilities",
      "recommendation": "Change default configurations to secure custom values"
    },
    {
      "id": "SCADA008",
      "cwe": "CWE-1188",
      "vulnerability_type": "Default Configuration",
      "severity": "Low",
      "category": "authentication",
      "description": "Default configuration detected",
      "file_path": "test_suite/samples/vulnerable.sl",
      "line_number": 113,
      "column": 0,
      "source_code": "CONFIGURATION DefaultConfig",
      "recommendation": "Change default configurations to secure custom values"
    },
    {
      "id": "insufficient-logging",
      "cwe": "CWE-778",
      "vulnerability_type": "Insufficient Security Logging",
      "severity": "Low",
      "category": "security",
      "description": "Authentication failure without proper logging detected - A09:2021 – Security Logging and Monitoring Failures",
      "file_path": "test_suite/samples/vulnerable.sl",
      "line_number": 201,
      "column": 17,
      "source_code": "401: RETURN 'Authentication failed for user admin';  // Vulnerable: username disclosure",
      "recommendation": "Implement comprehensive security logging and monitoring"
    },
    {
      "id": "SCADA003",
      "cwe": "CWE-119",
      "vulnerability_type": "Memory Safety Issue",
      "severity": "High",
      "category": "validation",
      "description": "Unsafe memory operation detected",
      "file_path": "test_suite/samples/vulnerable.st",
      "line_number": 30,
      "column": 0,
      "source_code": "MEMCPY(source := pressure_value,",
      "recommendation": "Validate memory bounds and use safe memory operations"
    },
    {
      "id": "SCADA005",
      "cwe": "CWE-287",
      "vulnerability_type": "Weak Authentication",
      "severity": "High",
      "category": "authorization",
      "description": "Weak authentication configuration detected",
      "file_path": "test_suite/samples/vulnerable.st",
      "line_number": 38,
      "column": 0,
      "source_code": "AUTH_LEVEL := 0;  // Vulnerable: no authentication required",
      "recommendation": "Implement strong authentication and authorization controls"
    },
    {
      "id": "SCADA005",
      "cwe": "CWE-287",
      "vulnerability_type": "Weak Authentication",
      "severity": "High",
      "category": "authorization",
      "description": "Weak authentication configuration detected",
      "file_path": "test_suite/samples/vulnerable.st",
      "line_number": 39,
      "column": 0,
      "source_code": "SECURITY_LEVEL := NONE;  // Vulnerable: no security",
      "recommendation": "Implement strong authentication and authorization controls"
    },
    {
      "id": "SCADA005",
      "cwe": "CWE-287",
      "vulnerability_type": "Weak Authentication",
      "severity": "High",
      "category": "authorization",
      "description": "Weak authentication configuration detected",
      "file_path": "test_suite/samples/vulnerable.st",
      "line_number": 45,
      "column": 0,
      "source_code": "BYPASS_AUTH := TRUE;  // Vulnerable: authentication bypass",
      "recommendation": "Implement strong authentication and authorization controls"
    },
    {
      "id": "SCADA006",
      "cwe": "CWE-863",
      "vulnerability_type": "Authorization Bypass",
      "severity": "Critical",
      "category": "authorization",
      "description": "Safety-critical operation without proper validation",
      "file_path": "test_suite/samples/vulnerable.st",
      "line_number": 9,
      "column": 0,
      "source_code": "emergency_stop : BOOL := FALSE;",
      "recommendation": "Add proper safety checks and validation for critical operations"
    },
    {
      "id": "SCADA006",
      "cwe": "CWE-863",
      "vulnerability_type": "Authorization Bypass",
      "severity": "Critical",
      "category": "authorization",
      "description": "Safety-critical operation without proper validation",
      "file_path": "test_suite/samples/vulnerable.st",
      "line_number": 42,
      "column": 0,
      "source_code": "emergency_stop := TRUE;  // Vulnerable: no validation for critical operation",
      "recommendation": "Add proper safety checks and validation for critical operations"
    },
    {
      "id": "SCADA006",
      "cwe": "CWE-863",
      "vulnerability_type": "Authorization Bypass",
      "severity": "Critical",
      "category": "authorization",
      "description": "Safety-critical operation without proper validation",
      "file_path": "test_suite/samples/vulnerable.st",
      "line_number": 52,
      "column": 0,
      "source_code": "safety_shutdown();  // Vulnerable: no proper timing sync",
      "recommendation": "Add proper safety checks and validation for critical operations"
    },
    {
      "id": "SCADA007",
      "cwe": "CWE-362",
      "vulnerability_type": "Race Condition",
      "severity": "Medium",
      "category": "validation",
      "description": "Timing-sensitive operation without proper synchronization",
      "file_path": "test_suite/samples/vulnerable.st",
      "line_number": 51,
      "column": 0,
      "source_code": "IF critical_timer > 5000 THEN",
      "recommendation": "Implement proper timing synchronization for critical operations"
    },
    {
      "id": "SCADA008",
      "cwe": "CWE-1188",
      "vulnerability_type": "Default Configuration",
      "severity": "Low",
      "category": "authentication",
      "description": "Default configuration detected",
      "file_path": "test_suite/samples/vulnerable.st",
      "line_number": 47,
      "column": 0,
      "source_code": "// Default configuration not changed",
      "recommendation": "Change default configurations to secure custom values"
    },
    {
      "id": "SCADA008",
      "cwe": "CWE-1188",
      "vulnerability_type": "Default Configuration",
      "severity": "Low",
      "category": "authentication",
      "description": "Default configuration detected",
      "file_path": "test_suite/samples/vulnerable.st",
      "line_number": 48,
      "column": 0,
      "source_code": "default_config := TRUE;  // Vulnerable: using default settings",
      "recommendation": "Change default configurations to secure custom values"
    },
    {
      "id": "CSHARP-CMD-001",
      "cwe": "CWE-78",
      "vulnerability_type": "Command Injection",
      "severity": "High",
      "category": "injection",
      "description": "Command injection vulnerability detected in C# process execution",
      "file_path": "test_suite/samples/vulnerable.cs",
      "line_number": 78,
      "column": 0,
      "source_code": "            Process.Start(\"cmd.exe\", \"/c ping \" + userInput);",
      "recommendation": "Validate and sanitize all user inputs before using in process execution"
    },
    {
      "id": "CSHARP-CMD-001",
      "cwe": "CWE-78",
      "vulnerability_type": "Command Injection",
      "severity": "High",
      "category": "injection",
      "description": "Command injection vulnerability detected in C# process execution",
      "file_path": "test_suite/samples/vulnerable.cs",
      "line_number": 87,
      "column": 0,
      "source_code": "            Process.Start(\"powershell.exe\", \"-Command Get-Process \" + userInput);",
      "recommendation": "Validate and sanitize all user inputs before using in process execution"
    },
    {
      "id": "CSHARP-DESER-001",
      "cwe": "CWE-502",
      "vulnerability_type": "Unsafe Deserialization",
      "severity": "High",
      "category": "deserialization",
      "description": "Unsafe deserialization detected in C# code",
      "file_path": "test_suite/samples/vulnerable.cs",
      "line_number": 118,
      "column": 0,
      "source_code": "            JsonConvert.DeserializeObject(jsonData);",
      "recommendation": "Validate serialized data and use safe serialization methods"
    },
    {
      "id": "CSHARP-DESER-001",
      "cwe": "CWE-502",
      "vulnerability_type": "Unsafe Deserialization",
      "severity": "High",
      "category": "deserialization",
      "description": "Unsafe deserialization detected in C# code",
      "file_path": "test_suite/samples/vulnerable.cs",
      "line_number": 125,
      "column": 0,
      "source_code": "            JsonConvert.DeserializeObject(jsonData, settings);",
      "recommendation": "Validate serialized data and use safe serialization methods"
    },
    {
      "id": "hardcoded-encryption-key",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Encryption Key",
      "severity": "Critical",
      "category": "security",
      "description": "Hardcoded encryption key or secret detected - A02:2021 – Cryptographic Failures",
      "file_path": "test_suite/samples/vulnerable.cs",
      "line_number": 58,
      "column": 22,
      "source_code": "string apiKey = \"sk-1234567890abcdef1234567890abcdef\";",
      "recommendation": "Use secure key management systems and environment variables"
    },
    {
      "id": "sql-injection-risk",
      "cwe": "CWE-89",
      "vulnerability_type": "SQL Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential SQL injection vulnerability detected - A03:2021 – Injection",
      "file_path": "test_suite/samples/vulnerable.cs",
      "line_number": 28,
      "column": 23,
      "source_code": "string query = \"SELECT * FROM Users WHERE Id = \" + userInput;",
      "recommendation": "Use parameterized queries or prepared statements"
    },
    {
      "id": "sql-injection-risk",
      "cwe": "CWE-89",
      "vulnerability_type": "SQL Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential SQL injection vulnerability detected - A03:2021 – Injection",
      "file_path": "test_suite/samples/vulnerable.cs",
      "line_number": 47,
      "column": 45,
      "source_code": "var users = context.Database.SqlQuery<User>(\"SELECT * FROM Users WHERE Email = '\" + userInput + \"'\");",
      "recommendation": "Use parameterized queries or prepared statements"
    },
    {
      "id": "command-injection-risk",
      "cwe": "CWE-78",
      "vulnerability_type": "Command Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential command injection vulnerability detected - A03:2021 – Injection",
      "file_path": "test_suite/samples/vulnerable.cs",
      "line_number": 234,
      "column": 12,
      "source_code": "System.Diagnostics.Debug.WriteLine(\"Credit card: \" + creditCard);",
      "recommendation": "Validate and sanitize input, use subprocess with shell=False"
    },
    {
      "id": "command-injection-risk",
      "cwe": "CWE-78",
      "vulnerability_type": "Command Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential command injection vulnerability detected - A03:2021 – Injection",
      "file_path": "test_suite/samples/vulnerable.cs",
      "line_number": 237,
      "column": 12,
      "source_code": "System.Diagnostics.Trace.WriteLine(\"API Key: \" + GetApiKey());",
      "recommendation": "Validate and sanitize input, use subprocess with shell=False"
    },
    {
      "id": "command-injection-risk",
      "cwe": "CWE-78",
      "vulnerability_type": "Command Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential command injection vulnerability detected - A03:2021 – Injection",
      "file_path": "test_suite/samples/vulnerable.cs",
      "line_number": 252,
      "column": 12,
      "source_code": "System.Text.RegularExpressions.Regex regex1 = new System.Text.RegularExpressions.Regex(@\"^(a+)+$\");",
      "recommendation": "Validate and sanitize input, use subprocess with shell=False"
    },
    {
      "id": "default-credentials",
      "cwe": "CWE-798",
      "vulnerability_type": "Default Credentials",
      "severity": "Critical",
      "category": "security",
      "description": "Default or weak credentials detected - A07:2021 – Identification and Authentication Failures",
      "file_path": "test_suite/samples/vulnerable.cs",
      "line_number": 55,
      "column": 79,
      "source_code": "string connectionString = \"Server=localhost;Database=MyApp;User Id=admin;Password=super_secret_password_123;\";",
      "recommendation": "Change default credentials and use strong, unique passwords"
    }
  ],
  "files_analyzed": 14,
  "total_lines_of_code": 2044,
  "analysis_duration": {
    "secs": 4,
    "nanos": 145862137
  }
}