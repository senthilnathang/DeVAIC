{
  "summary": {
    "total_vulnerabilities": 77,
    "by_severity": {
      "LOW": 2,
      "MEDIUM": 14,
      "CRITICAL": 33,
      "HIGH": 28
    },
    "by_category": {
      "privacy": 10,
      "security": 36,
      "vulnerability": 31
    },
    "by_language": {
      "TypeScript": 4,
      "Java": 22,
      "JavaScript": 24,
      "C++": 4,
      "Python": 18,
      "C": 4,
      "Unknown": 1
    }
  },
  "vulnerabilities": [
    {
      "id": "logging-sensitive-data",
      "cwe": "CWE-200",
      "vulnerability_type": "Logging Sensitive Data",
      "severity": "High",
      "category": "privacy",
      "description": "Sensitive data being logged detected",
      "file_path": "examples/vulnerability_test.java",
      "line_number": 67,
      "column": 19,
      "source_code": "System.out.println(\"Processing SSN: \" + ssn);  // Sensitive data in logs",
      "recommendation": "Avoid logging sensitive data. Use data masking or redaction."
    },
    {
      "id": "weak-random-generator",
      "cwe": "CWE-338",
      "vulnerability_type": "Weak Random Number Generator",
      "severity": "Medium",
      "category": "security",
      "description": "Weak random number generator used for security purposes - A02:2021 – Cryptographic Failures",
      "file_path": "examples/vulnerability_test.java",
      "line_number": 80,
      "column": 30,
      "source_code": "return String.valueOf(Math.random());  // Weak randomness",
      "recommendation": "Use cryptographically secure random number generators (secrets module in Python, crypto.randomBytes in Node.js)"
    },
    {
      "id": "sql-injection-risk",
      "cwe": "CWE-89",
      "vulnerability_type": "SQL Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential SQL injection vulnerability detected - A03:2021 – Injection",
      "file_path": "examples/vulnerability_test.java",
      "line_number": 16,
      "column": 15,
      "source_code": "String query = \"SELECT * FROM users WHERE id = \" + userId;",
      "recommendation": "Use parameterized queries or prepared statements"
    },
    {
      "id": "command-injection-risk",
      "cwe": "CWE-78",
      "vulnerability_type": "Command Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential command injection vulnerability detected - A03:2021 – Injection",
      "file_path": "examples/vulnerability_test.java",
      "line_number": 36,
      "column": 29,
      "source_code": "Runtime.getRuntime().exec(\"ls \" + userInput);  // Command injection",
      "recommendation": "Validate and sanitize input, use subprocess with shell=False"
    },
    {
      "id": "path-traversal-risk",
      "cwe": "CWE-22",
      "vulnerability_type": "Path Traversal Risk",
      "severity": "High",
      "category": "security",
      "description": "Potential path traversal vulnerability detected - A01:2021 – Broken Access Control",
      "file_path": "examples/vulnerability_test.java",
      "line_number": 43,
      "column": 8,
      "source_code": "File file = new File(\"../../../etc/passwd\" + filename);  // Path traversal",
      "recommendation": "Validate and sanitize file paths, use os.path.join()"
    },
    {
      "id": "command-injection-risk",
      "cwe": "CWE-78",
      "vulnerability_type": "Command Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential command injection vulnerability detected - A03:2021 – Injection",
      "file_path": "examples/vulnerability_test.java",
      "line_number": 67,
      "column": 8,
      "source_code": "System.out.println(\"Processing SSN: \" + ssn);  // Sensitive data in logs",
      "recommendation": "Validate and sanitize input, use subprocess with shell=False"
    },
    {
      "id": "command-injection-risk",
      "cwe": "CWE-78",
      "vulnerability_type": "Command Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential command injection vulnerability detected - A03:2021 – Injection",
      "file_path": "examples/vulnerability_test.java",
      "line_number": 68,
      "column": 8,
      "source_code": "System.err.println(\"Credit card: \" + creditCard);",
      "recommendation": "Validate and sanitize input, use subprocess with shell=False"
    },
    {
      "id": "cwe-22-path-traversal",
      "cwe": "CWE-22",
      "vulnerability_type": "Path Traversal",
      "severity": "High",
      "category": "vulnerability",
      "description": "Path traversal vulnerability detected - A01:2021 – Broken Access Control",
      "file_path": "examples/vulnerability_test.java",
      "line_number": 43,
      "column": 8,
      "source_code": "File file = new File(\"../../../etc/passwd\" + filename);  // Path traversal",
      "recommendation": "Validate and canonicalize file paths, use whitelist approach"
    },
    {
      "id": "owasp-a08-integrity-failures",
      "cwe": "CWE-502",
      "vulnerability_type": "Software and Data Integrity Failures",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Unsafe deserialization of user input detected - A08:2021 – Software and Data Integrity Failures",
      "file_path": "examples/vulnerability_test.java",
      "line_number": 35,
      "column": 16,
      "source_code": "public void executeCommand(String userInput) throws IOException {",
      "recommendation": "Use safe deserialization methods and validate input"
    },
    {
      "id": "owasp-a08-integrity-failures",
      "cwe": "CWE-502",
      "vulnerability_type": "Software and Data Integrity Failures",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Unsafe deserialization of user input detected - A08:2021 – Software and Data Integrity Failures",
      "file_path": "examples/vulnerability_test.java",
      "line_number": 36,
      "column": 29,
      "source_code": "Runtime.getRuntime().exec(\"ls \" + userInput);  // Command injection",
      "recommendation": "Use safe deserialization methods and validate input"
    },
    {
      "id": "java-xxe-vulnerability",
      "cwe": "CWE-611",
      "vulnerability_type": "XML External Entity (XXE)",
      "severity": "High",
      "category": "vulnerability",
      "description": "Potential XXE vulnerability in XML parsing - A05:2021 – Security Misconfiguration",
      "file_path": "examples/vulnerability_test.java",
      "line_number": 22,
      "column": 8,
      "source_code": "DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();  // XXE vulnerable",
      "recommendation": "Disable external entities in XML parsers"
    },
    {
      "id": "weak-random-generator",
      "cwe": "CWE-338",
      "vulnerability_type": "Weak Random Number Generator",
      "severity": "Medium",
      "category": "security",
      "description": "Weak random number generator used for security purposes - A02:2021 – Cryptographic Failures",
      "file_path": "examples/vulnerable.js",
      "line_number": 77,
      "column": 37,
      "source_code": "document.cookie = 'sessionId=' + Math.random() + '; path=/';",
      "recommendation": "Use cryptographically secure random number generators (secrets module in Python, crypto.randomBytes in Node.js)"
    },
    {
      "id": "weak-random-generator",
      "cwe": "CWE-338",
      "vulnerability_type": "Weak Random Number Generator",
      "severity": "Medium",
      "category": "security",
      "description": "Weak random number generator used for security purposes - A02:2021 – Cryptographic Failures",
      "file_path": "examples/vulnerable.js",
      "line_number": 84,
      "column": 22,
      "source_code": "const sessionId = Math.random().toString(36);",
      "recommendation": "Use cryptographically secure random number generators (secrets module in Python, crypto.randomBytes in Node.js)"
    },
    {
      "id": "weak-random-generator",
      "cwe": "CWE-338",
      "vulnerability_type": "Weak Random Number Generator",
      "severity": "Medium",
      "category": "security",
      "description": "Weak random number generator used for security purposes - A02:2021 – Cryptographic Failures",
      "file_path": "examples/vulnerable.js",
      "line_number": 95,
      "column": 15,
      "source_code": "return Math.random().toString(16) + new Date().getTime();",
      "recommendation": "Use cryptographically secure random number generators (secrets module in Python, crypto.randomBytes in Node.js)"
    },
    {
      "id": "weak-random-generator",
      "cwe": "CWE-338",
      "vulnerability_type": "Weak Random Number Generator",
      "severity": "Medium",
      "category": "security",
      "description": "Weak random number generator used for security purposes - A02:2021 – Cryptographic Failures",
      "file_path": "examples/vulnerable.js",
      "line_number": 150,
      "column": 26,
      "source_code": "const sessionId = Math.random().toString();",
      "recommendation": "Use cryptographically secure random number generators (secrets module in Python, crypto.randomBytes in Node.js)"
    },
    {
      "id": "sql-injection-risk",
      "cwe": "CWE-89",
      "vulnerability_type": "SQL Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential SQL injection vulnerability detected - A03:2021 – Injection",
      "file_path": "examples/vulnerable.js",
      "line_number": 16,
      "column": 13,
      "source_code": "document.querySelector('.greeting').outerHTML = '<div>Hello ' + userInput + '</div>';",
      "recommendation": "Use parameterized queries or prepared statements"
    },
    {
      "id": "sql-injection-risk",
      "cwe": "CWE-89",
      "vulnerability_type": "SQL Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential SQL injection vulnerability detected - A03:2021 – Injection",
      "file_path": "examples/vulnerable.js",
      "line_number": 69,
      "column": 13,
      "source_code": "document.querySelector('iframe').src = 'https://example.com/' + url;",
      "recommendation": "Use parameterized queries or prepared statements"
    },
    {
      "id": "sql-injection-risk",
      "cwe": "CWE-89",
      "vulnerability_type": "SQL Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential SQL injection vulnerability detected - A03:2021 – Injection",
      "file_path": "examples/vulnerable.js",
      "line_number": 70,
      "column": 13,
      "source_code": "document.querySelector('a').href = 'javascript:' + url;",
      "recommendation": "Use parameterized queries or prepared statements"
    },
    {
      "id": "command-injection-risk",
      "cwe": "CWE-78",
      "vulnerability_type": "Command Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential command injection vulnerability detected - A03:2021 – Injection",
      "file_path": "examples/vulnerable.js",
      "line_number": 187,
      "column": 8,
      "source_code": "exec('ls -la ' + userInput, (error, stdout, stderr) => {",
      "recommendation": "Validate and sanitize input, use subprocess with shell=False"
    },
    {
      "id": "path-traversal-risk",
      "cwe": "CWE-22",
      "vulnerability_type": "Path Traversal Risk",
      "severity": "High",
      "category": "security",
      "description": "Potential path traversal vulnerability detected - A01:2021 – Broken Access Control",
      "file_path": "examples/vulnerable.js",
      "line_number": 237,
      "column": 14,
      "source_code": "app.uploadFile('../../../etc/passwd', 'malicious content');",
      "recommendation": "Validate and sanitize file paths, use os.path.join()"
    },
    {
      "id": "cwe-79-xss",
      "cwe": "CWE-79",
      "vulnerability_type": "Cross-site Scripting (XSS)",
      "severity": "High",
      "category": "vulnerability",
      "description": "Potential XSS vulnerability through DOM manipulation - A03:2021 – Injection",
      "file_path": "examples/vulnerable.js",
      "line_number": 13,
      "column": 39,
      "source_code": "document.getElementById('profile').innerHTML = '<h1>Welcome ' + userInput + '</h1>';",
      "recommendation": "Use safe DOM manipulation methods or sanitize user input"
    },
    {
      "id": "cwe-79-xss",
      "cwe": "CWE-79",
      "vulnerability_type": "Cross-site Scripting (XSS)",
      "severity": "High",
      "category": "vulnerability",
      "description": "Potential XSS vulnerability through DOM manipulation - A03:2021 – Injection",
      "file_path": "examples/vulnerable.js",
      "line_number": 16,
      "column": 40,
      "source_code": "document.querySelector('.greeting').outerHTML = '<div>Hello ' + userInput + '</div>';",
      "recommendation": "Use safe DOM manipulation methods or sanitize user input"
    },
    {
      "id": "cwe-22-path-traversal",
      "cwe": "CWE-22",
      "vulnerability_type": "Path Traversal",
      "severity": "High",
      "category": "vulnerability",
      "description": "Path traversal vulnerability detected - A01:2021 – Broken Access Control",
      "file_path": "examples/vulnerable.js",
      "line_number": 237,
      "column": 14,
      "source_code": "app.uploadFile('../../../etc/passwd', 'malicious content');",
      "recommendation": "Validate and canonicalize file paths, use whitelist approach"
    },
    {
      "id": "javascript-prototype-pollution",
      "cwe": "CWE-1321",
      "vulnerability_type": "Prototype Pollution",
      "severity": "High",
      "category": "vulnerability",
      "description": "Potential prototype pollution vulnerability - A08:2021 – Software and Data Integrity Failures",
      "file_path": "examples/vulnerable.js",
      "line_number": 30,
      "column": 13,
      "source_code": "userData.__proto__.isAdmin = true;",
      "recommendation": "Validate object properties and use Object.freeze() or Map"
    },
    {
      "id": "javascript-prototype-pollution",
      "cwe": "CWE-1321",
      "vulnerability_type": "Prototype Pollution",
      "severity": "High",
      "category": "vulnerability",
      "description": "Potential prototype pollution vulnerability - A08:2021 – Software and Data Integrity Failures",
      "file_path": "examples/vulnerable.js",
      "line_number": 33,
      "column": 13,
      "source_code": "userData.constructor.prototype.hasAccess = true;",
      "recommendation": "Validate object properties and use Object.freeze() or Map"
    },
    {
      "id": "javascript-prototype-pollution",
      "cwe": "CWE-1321",
      "vulnerability_type": "Prototype Pollution",
      "severity": "High",
      "category": "vulnerability",
      "description": "Potential prototype pollution vulnerability - A08:2021 – Software and Data Integrity Failures",
      "file_path": "examples/vulnerable.js",
      "line_number": 44,
      "column": 25,
      "source_code": "if (key === '__proto__') continue;  // Insufficient protection",
      "recommendation": "Validate object properties and use Object.freeze() or Map"
    },
    {
      "id": "javascript-prototype-pollution",
      "cwe": "CWE-1321",
      "vulnerability_type": "Prototype Pollution",
      "severity": "High",
      "category": "vulnerability",
      "description": "Potential prototype pollution vulnerability - A08:2021 – Software and Data Integrity Failures",
      "file_path": "examples/vulnerable.js",
      "line_number": 164,
      "column": 25,
      "source_code": "if (user && user.__proto__.isAdmin) {",
      "recommendation": "Validate object properties and use Object.freeze() or Map"
    },
    {
      "id": "sql-injection-risk",
      "cwe": "CWE-89",
      "vulnerability_type": "SQL Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential SQL injection vulnerability detected - A03:2021 – Injection",
      "file_path": "examples/vulnerable.java",
      "line_number": 22,
      "column": 15,
      "source_code": "String query1 = \"SELECT * FROM users WHERE id = \" + userId;",
      "recommendation": "Use parameterized queries or prepared statements"
    },
    {
      "id": "sql-injection-risk",
      "cwe": "CWE-89",
      "vulnerability_type": "SQL Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential SQL injection vulnerability detected - A03:2021 – Injection",
      "file_path": "examples/vulnerable.java",
      "line_number": 27,
      "column": 15,
      "source_code": "String query2 = \"SELECT * FROM users WHERE name = '\" + userName + \"'\";",
      "recommendation": "Use parameterized queries or prepared statements"
    },
    {
      "id": "sql-injection-risk",
      "cwe": "CWE-89",
      "vulnerability_type": "SQL Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential SQL injection vulnerability detected - A03:2021 – Injection",
      "file_path": "examples/vulnerable.java",
      "line_number": 33,
      "column": 13,
      "source_code": "stmt.executeUpdate(\"DELETE FROM logs WHERE message = '\" + userInput + \"'\");",
      "recommendation": "Use parameterized queries or prepared statements"
    },
    {
      "id": "command-injection-risk",
      "cwe": "CWE-78",
      "vulnerability_type": "Command Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential command injection vulnerability detected - A03:2021 – Injection",
      "file_path": "examples/vulnerable.java",
      "line_number": 33,
      "column": 13,
      "source_code": "stmt.executeUpdate(\"DELETE FROM logs WHERE message = '\" + userInput + \"'\");",
      "recommendation": "Validate and sanitize input, use subprocess with shell=False"
    },
    {
      "id": "sql-injection-risk",
      "cwe": "CWE-89",
      "vulnerability_type": "SQL Injection Risk",
      "severity": "Critical",
      "category": "security",
      "description": "Potential SQL injection vulnerability detected - A03:2021 – Injection",
      "file_path": "examples/vulnerable.java",
      "line_number": 115,
      "column": 15,
      "source_code": "String query = \"SELECT * FROM audit_log WHERE user_id = \" + userId + \" AND action = '\" + action + \"'\";",
      "recommendation": "Use parameterized queries or prepared statements"
    },
    {
      "id": "path-traversal-risk",
      "cwe": "CWE-22",
      "vulnerability_type": "Path Traversal Risk",
      "severity": "High",
      "category": "security",
      "description": "Potential path traversal vulnerability detected - A01:2021 – Broken Access Control",
      "file_path": "examples/vulnerable.java",
      "line_number": 154,
      "column": 16,
      "source_code": "app.fileOperations(\"../../../etc/passwd\");",
      "recommendation": "Validate and sanitize file paths, use os.path.join()"
    },
    {
      "id": "cwe-22-path-traversal",
      "cwe": "CWE-22",
      "vulnerability_type": "Path Traversal",
      "severity": "High",
      "category": "vulnerability",
      "description": "Path traversal vulnerability detected - A01:2021 – Broken Access Control",
      "file_path": "examples/vulnerable.java",
      "line_number": 154,
      "column": 16,
      "source_code": "app.fileOperations(\"../../../etc/passwd\");",
      "recommendation": "Validate and canonicalize file paths, use whitelist approach"
    },
    {
      "id": "owasp-a08-integrity-failures",
      "cwe": "CWE-502",
      "vulnerability_type": "Software and Data Integrity Failures",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Unsafe deserialization of user input detected - A08:2021 – Software and Data Integrity Failures",
      "file_path": "examples/vulnerable.java",
      "line_number": 33,
      "column": 13,
      "source_code": "stmt.executeUpdate(\"DELETE FROM logs WHERE message = '\" + userInput + \"'\");",
      "recommendation": "Use safe deserialization methods and validate input"
    },
    {
      "id": "owasp-a02-crypto-failures",
      "cwe": "CWE-327",
      "vulnerability_type": "Cryptographic Failures",
      "severity": "High",
      "category": "vulnerability",
      "description": "Weak encryption mode (ECB) detected - A02:2021 – Cryptographic Failures",
      "file_path": "examples/vulnerable.java",
      "line_number": 74,
      "column": 15,
      "source_code": "Cipher desCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");",
      "recommendation": "Use secure encryption modes like CBC, GCM, or CTR"
    },
    {
      "id": "java-xxe-vulnerability",
      "cwe": "CWE-611",
      "vulnerability_type": "XML External Entity (XXE)",
      "severity": "High",
      "category": "vulnerability",
      "description": "Potential XXE vulnerability in XML parsing - A05:2021 – Security Misconfiguration",
      "file_path": "examples/vulnerable.java",
      "line_number": 54,
      "column": 8,
      "source_code": "DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();",
      "recommendation": "Disable external entities in XML parsers"
    },
    {
      "id": "java-xxe-vulnerability",
      "cwe": "CWE-611",
      "vulnerability_type": "XML External Entity (XXE)",
      "severity": "High",
      "category": "vulnerability",
      "description": "Potential XXE vulnerability in XML parsing - A05:2021 – Security Misconfiguration",
      "file_path": "examples/vulnerable.java",
      "line_number": 122,
      "column": 12,
      "source_code": "DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();",
      "recommendation": "Disable external entities in XML parsers"
    },
    {
      "id": "cwe-125-buffer-overflow",
      "cwe": "CWE-125",
      "vulnerability_type": "Buffer Overflow",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Buffer overflow vulnerability from unsafe function usage - A06:2021 – Vulnerable and Outdated Components",
      "file_path": "examples/vulnerable.cpp",
      "line_number": 25,
      "column": 4,
      "source_code": "strcpy(dest, src);  // Buffer overflow vulnerability",
      "recommendation": "Use safe alternatives: strncpy, strncat, snprintf, fgets"
    },
    {
      "id": "cwe-125-buffer-overflow",
      "cwe": "CWE-125",
      "vulnerability_type": "Buffer Overflow",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Buffer overflow vulnerability from unsafe function usage - A06:2021 – Vulnerable and Outdated Components",
      "file_path": "examples/vulnerable.cpp",
      "line_number": 26,
      "column": 4,
      "source_code": "strcat(dest, \" more text\");  // Potential buffer overflow",
      "recommendation": "Use safe alternatives: strncpy, strncat, snprintf, fgets"
    },
    {
      "id": "cwe-125-buffer-overflow",
      "cwe": "CWE-125",
      "vulnerability_type": "Buffer Overflow",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Buffer overflow vulnerability from unsafe function usage - A06:2021 – Vulnerable and Outdated Components",
      "file_path": "examples/vulnerable.cpp",
      "line_number": 29,
      "column": 4,
      "source_code": "sprintf(format_str, \"User input: %s\", src);  // Unsafe formatting",
      "recommendation": "Use safe alternatives: strncpy, strncat, snprintf, fgets"
    },
    {
      "id": "cwe-125-buffer-overflow",
      "cwe": "CWE-125",
      "vulnerability_type": "Buffer Overflow",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Buffer overflow vulnerability from unsafe function usage - A06:2021 – Vulnerable and Outdated Components",
      "file_path": "examples/vulnerable.cpp",
      "line_number": 97,
      "column": 8,
      "source_code": "strcpy(buffer, source);  // No bounds checking - buffer overflow",
      "recommendation": "Use safe alternatives: strncpy, strncat, snprintf, fgets"
    },
    {
      "id": "hardcoded-encryption-key",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Encryption Key",
      "severity": "Critical",
      "category": "security",
      "description": "Hardcoded encryption key or secret detected - A02:2021 – Cryptographic Failures",
      "file_path": "examples/vulnerable.ts",
      "line_number": 9,
      "column": 10,
      "source_code": "const API_KEY = \"sk-1234567890abcdef1234567890abcdef\";",
      "recommendation": "Use secure key management systems and environment variables"
    },
    {
      "id": "weak-random-generator",
      "cwe": "CWE-338",
      "vulnerability_type": "Weak Random Number Generator",
      "severity": "Medium",
      "category": "security",
      "description": "Weak random number generator used for security purposes - A02:2021 – Cryptographic Failures",
      "file_path": "examples/vulnerable.ts",
      "line_number": 25,
      "column": 11,
      "source_code": "return Math.random().toString(36);",
      "recommendation": "Use cryptographically secure random number generators (secrets module in Python, crypto.randomBytes in Node.js)"
    },
    {
      "id": "cwe-79-xss",
      "cwe": "CWE-79",
      "vulnerability_type": "Cross-site Scripting (XSS)",
      "severity": "High",
      "category": "vulnerability",
      "description": "Potential XSS vulnerability through DOM manipulation - A03:2021 – Injection",
      "file_path": "examples/vulnerable.ts",
      "line_number": 20,
      "column": 39,
      "source_code": "document.getElementById('output')!.innerHTML = '<div>' + userInput + '</div>';",
      "recommendation": "Use safe DOM manipulation methods or sanitize user input"
    },
    {
      "id": "hardcoded-encryption-key",
      "cwe": "CWE-798",
      "vulnerability_type": "Hardcoded Encryption Key",
      "severity": "Critical",
      "category": "security",
      "description": "Hardcoded encryption key or secret detected - A02:2021 – Cryptographic Failures",
      "file_path": "examples/vulnerable.py",
      "line_number": 9,
      "column": 4,
      "source_code": "API_KEY = \"sk-1234567890abcdef1234567890abcdef\"",
      "recommendation": "Use secure key management systems and environment variables"
    },
    {
      "id": "weak-hash-algorithm",
      "cwe": "CWE-327",
      "vulnerability_type": "Weak Hash Algorithm",
      "severity": "High",
      "category": "security",
      "description": "Weak cryptographic hash algorithm detected - A02:2021 – Cryptographic Failures",
      "file_path": "examples/vulnerable.py",
      "line_number": 41,
      "column": 11,
      "source_code": "return hashlib.md5(password.encode()).hexdigest()",
      "recommendation": "Use secure hash algorithms like SHA-256, SHA-3, or bcrypt for passwords"
    },
    {
      "id": "weak-hash-algorithm",
      "cwe": "CWE-327",
      "vulnerability_type": "Weak Hash Algorithm",
      "severity": "High",
      "category": "security",
      "description": "Weak cryptographic hash algorithm detected - A02:2021 – Cryptographic Failures",
      "file_path": "examples/vulnerable.py",
      "line_number": 46,
      "column": 11,
      "source_code": "return hashlib.sha1(data.encode()).hexdigest()",
      "recommendation": "Use secure hash algorithms like SHA-256, SHA-3, or bcrypt for passwords"
    },
    {
      "id": "debug-mode-enabled",
      "cwe": "CWE-489",
      "vulnerability_type": "Debug Mode Enabled",
      "severity": "Medium",
      "category": "security",
      "description": "Debug mode enabled in production code detected - A05:2021 – Security Misconfiguration",
      "file_path": "examples/vulnerable.py",
      "line_number": 59,
      "column": 0,
      "source_code": "DEBUG = True",
      "recommendation": "Disable debug mode in production environments"
    },
    {
      "id": "owasp-a08-integrity-failures",
      "cwe": "CWE-502",
      "vulnerability_type": "Software and Data Integrity Failures",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Unsafe deserialization of user input detected - A08:2021 – Software and Data Integrity Failures",
      "file_path": "examples/vulnerable.py",
      "line_number": 23,
      "column": 4,
      "source_code": "def execute_command(user_input):",
      "recommendation": "Use safe deserialization methods and validate input"
    },
    {
      "id": "owasp-a08-integrity-failures",
      "cwe": "CWE-502",
      "vulnerability_type": "Software and Data Integrity Failures",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Unsafe deserialization of user input detected - A08:2021 – Software and Data Integrity Failures",
      "file_path": "examples/vulnerable.py",
      "line_number": 50,
      "column": 18,
      "source_code": "# Vulnerable: eval with user input",
      "recommendation": "Use safe deserialization methods and validate input"
    },
    {
      "id": "owasp-a08-integrity-failures",
      "cwe": "CWE-502",
      "vulnerability_type": "Software and Data Integrity Failures",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Unsafe deserialization of user input detected - A08:2021 – Software and Data Integrity Failures",
      "file_path": "examples/vulnerable.py",
      "line_number": 55,
      "column": 18,
      "source_code": "# Vulnerable: exec with user input",
      "recommendation": "Use safe deserialization methods and validate input"
    },
    {
      "id": "cwe-125-buffer-overflow",
      "cwe": "CWE-125",
      "vulnerability_type": "Buffer Overflow",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Buffer overflow vulnerability from unsafe function usage - A06:2021 – Vulnerable and Outdated Components",
      "file_path": "examples/vulnerable.c",
      "line_number": 8,
      "column": 4,
      "source_code": "strcpy(buffer, input);  // Vulnerable: no bounds checking",
      "recommendation": "Use safe alternatives: strncpy, strncat, snprintf, fgets"
    },
    {
      "id": "cwe-125-buffer-overflow",
      "cwe": "CWE-125",
      "vulnerability_type": "Buffer Overflow",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "Buffer overflow vulnerability from unsafe function usage - A06:2021 – Vulnerable and Outdated Components",
      "file_path": "examples/vulnerable.c",
      "line_number": 33,
      "column": 4,
      "source_code": "gets(input);  // Vulnerable: gets() is unsafe",
      "recommendation": "Use safe alternatives: strncpy, strncat, snprintf, fgets"
    },
    {
      "id": "c-format-string",
      "cwe": "CWE-134",
      "vulnerability_type": "Format String Vulnerability",
      "severity": "High",
      "category": "vulnerability",
      "description": "Format string vulnerability detected - A03:2021 – Injection",
      "file_path": "examples/vulnerable.c",
      "line_number": 14,
      "column": 4,
      "source_code": "printf(user_input);  // Vulnerable: user input used as format string",
      "recommendation": "Always use format specifiers with printf family functions"
    },
    {
      "id": "c-format-string",
      "cwe": "CWE-134",
      "vulnerability_type": "Format String Vulnerability",
      "severity": "High",
      "category": "vulnerability",
      "description": "Format string vulnerability detected - A03:2021 – Injection",
      "file_path": "examples/vulnerable.c",
      "line_number": 32,
      "column": 4,
      "source_code": "printf(\"Enter data: \");",
      "recommendation": "Always use format specifiers with printf family functions"
    },
    {
      "id": "weak-random-generator",
      "cwe": "CWE-338",
      "vulnerability_type": "Weak Random Number Generator",
      "severity": "Medium",
      "category": "security",
      "description": "Weak random number generator used for security purposes - A02:2021 – Cryptographic Failures",
      "file_path": "examples/vulnerable.tsx",
      "line_number": 31,
      "column": 11,
      "source_code": "return Math.random().toString(36).substring(2);",
      "recommendation": "Use cryptographically secure random number generators (secrets module in Python, crypto.randomBytes in Node.js)"
    },
    {
      "id": "insufficient-logging",
      "cwe": "CWE-778",
      "vulnerability_type": "Insufficient Security Logging",
      "severity": "Low",
      "category": "security",
      "description": "Authentication failure without proper logging detected - A09:2021 – Security Logging and Monitoring Failures",
      "file_path": "examples/vulnerable.sl",
      "line_number": 201,
      "column": 17,
      "source_code": "401: RETURN 'Authentication failed for user admin';  // Vulnerable: username disclosure",
      "recommendation": "Implement comprehensive security logging and monitoring"
    },
    {
      "id": "social-security-number",
      "cwe": "CWE-200",
      "vulnerability_type": "Social Security Number",
      "severity": "Critical",
      "category": "privacy",
      "description": "Social Security Number detected in source code",
      "file_path": "examples/privacy_test.py",
      "line_number": 8,
      "column": 0,
      "source_code": "ssn = \"123-45-6789\"  # Social Security Number detected",
      "recommendation": "Remove hardcoded SSN. Use tokenization or encryption for sensitive data storage."
    },
    {
      "id": "credit-card-number",
      "cwe": "CWE-200",
      "vulnerability_type": "Credit Card Number",
      "severity": "Critical",
      "category": "privacy",
      "description": "Credit card number detected in source code",
      "file_path": "examples/privacy_test.py",
      "line_number": 9,
      "column": 0,
      "source_code": "credit_card = \"4532-1234-5678-9012\"  # Credit card number detected",
      "recommendation": "Remove hardcoded credit card data. Use PCI-compliant tokenization services."
    },
    {
      "id": "email-address",
      "cwe": "CWE-200",
      "vulnerability_type": "Email Address",
      "severity": "Medium",
      "category": "privacy",
      "description": "Email address detected in source code",
      "file_path": "examples/privacy_test.py",
      "line_number": 10,
      "column": 0,
      "source_code": "email = \"user@example.com\"  # Email address hardcoded",
      "recommendation": "Avoid hardcoding email addresses. Use configuration or environment variables."
    },
    {
      "id": "phone-number",
      "cwe": "CWE-200",
      "vulnerability_type": "Phone Number",
      "severity": "Medium",
      "category": "privacy",
      "description": "Phone number detected in source code",
      "file_path": "examples/privacy_test.py",
      "line_number": 11,
      "column": 0,
      "source_code": "phone = \"555-123-4567\"  # Phone number detected",
      "recommendation": "Avoid hardcoding phone numbers. Use configuration or masked data for testing."
    },
    {
      "id": "passport-number",
      "cwe": "CWE-200",
      "vulnerability_type": "Passport Number",
      "severity": "Critical",
      "category": "privacy",
      "description": "Passport number detected in source code",
      "file_path": "examples/privacy_test.py",
      "line_number": 12,
      "column": 0,
      "source_code": "passport = \"A1234567\"  # Passport number detected",
      "recommendation": "Remove hardcoded passport data. Use anonymized test data."
    },
    {
      "id": "social-security-number",
      "cwe": "CWE-200",
      "vulnerability_type": "Social Security Number",
      "severity": "Critical",
      "category": "privacy",
      "description": "Social Security Number detected in source code",
      "file_path": "examples/privacy_test.py",
      "line_number": 25,
      "column": 9,
      "source_code": "user_ssn = \"123-45-6789\"",
      "recommendation": "Remove hardcoded SSN. Use tokenization or encryption for sensitive data storage."
    },
    {
      "id": "health-insurance-number",
      "cwe": "CWE-200",
      "vulnerability_type": "Health Insurance Number",
      "severity": "Critical",
      "category": "privacy",
      "description": "Health insurance number detected in source code",
      "file_path": "examples/privacy_test.py",
      "line_number": 16,
      "column": 0,
      "source_code": "insurance_number = \"INS123456789\"  # Health insurance number detected",
      "recommendation": "Remove hardcoded insurance data. Use synthetic data for testing."
    },
    {
      "id": "database-select-pii",
      "cwe": "CWE-200",
      "vulnerability_type": "Database PII Query",
      "severity": "High",
      "category": "privacy",
      "description": "Database query selecting PII data detected",
      "file_path": "examples/privacy_test.py",
      "line_number": 20,
      "column": 13,
      "source_code": "query = \"SELECT ssn, credit_card, email FROM users WHERE id = 1\"  # PII in query",
      "recommendation": "Ensure proper access controls and auditing for PII data queries."
    },
    {
      "id": "api-response-pii",
      "cwe": "CWE-200",
      "vulnerability_type": "API Response with PII",
      "severity": "High",
      "category": "privacy",
      "description": "API response containing PII data detected",
      "file_path": "examples/privacy_test.py",
      "line_number": 39,
      "column": 4,
      "source_code": "return hashlib.md5(ssn.encode()).hexdigest()  # Weak hash for PII",
      "recommendation": "Filter sensitive data from API responses. Use data transformation layers."
    },
    {
      "id": "world-writable-files",
      "cwe": "CWE-732",
      "vulnerability_type": "World Writable Files",
      "severity": "Medium",
      "category": "security",
      "description": "File opened with potentially unsafe write permissions - A01:2021 – Broken Access Control",
      "file_path": "examples/privacy_test.py",
      "line_number": 43,
      "column": 9,
      "source_code": "with open(\"user_data.txt\", \"w\") as f:",
      "recommendation": "Use restrictive file permissions and validate file paths"
    },
    {
      "id": "weak-hash-algorithm",
      "cwe": "CWE-327",
      "vulnerability_type": "Weak Hash Algorithm",
      "severity": "High",
      "category": "security",
      "description": "Weak cryptographic hash algorithm detected - A02:2021 – Cryptographic Failures",
      "file_path": "examples/privacy_test.py",
      "line_number": 39,
      "column": 11,
      "source_code": "return hashlib.md5(ssn.encode()).hexdigest()  # Weak hash for PII",
      "recommendation": "Use secure hash algorithms like SHA-256, SHA-3, or bcrypt for passwords"
    },
    {
      "id": "weak-random-generator",
      "cwe": "CWE-338",
      "vulnerability_type": "Weak Random Number Generator",
      "severity": "Medium",
      "category": "security",
      "description": "Weak random number generator used for security purposes - A02:2021 – Cryptographic Failures",
      "file_path": "examples/security_risks_test.js",
      "line_number": 61,
      "column": 11,
      "source_code": "return Math.random().toString(36).substr(2, 9);  // Weak randomness for token",
      "recommendation": "Use cryptographically secure random number generators (secrets module in Python, crypto.randomBytes in Node.js)"
    },
    {
      "id": "path-traversal-risk",
      "cwe": "CWE-22",
      "vulnerability_type": "Path Traversal Risk",
      "severity": "High",
      "category": "security",
      "description": "Potential path traversal vulnerability detected - A01:2021 – Broken Access Control",
      "file_path": "examples/security_risks_test.js",
      "line_number": 119,
      "column": 14,
      "source_code": "return fs.readFileSync('../../../etc/passwd');  // Path traversal",
      "recommendation": "Validate and sanitize file paths, use os.path.join()"
    },
    {
      "id": "debug-mode-enabled",
      "cwe": "CWE-489",
      "vulnerability_type": "Debug Mode Enabled",
      "severity": "Medium",
      "category": "security",
      "description": "Debug mode enabled in production code detected - A05:2021 – Security Misconfiguration",
      "file_path": "examples/security_risks_test.js",
      "line_number": 85,
      "column": 4,
      "source_code": "debug: true,  // Debug mode enabled",
      "recommendation": "Disable debug mode in production environments"
    },
    {
      "id": "debug-mode-enabled",
      "cwe": "CWE-489",
      "vulnerability_type": "Debug Mode Enabled",
      "severity": "Medium",
      "category": "security",
      "description": "Debug mode enabled in production code detected - A05:2021 – Security Misconfiguration",
      "file_path": "examples/security_risks_test.js",
      "line_number": 86,
      "column": 4,
      "source_code": "development: true",
      "recommendation": "Disable debug mode in production environments"
    },
    {
      "id": "insufficient-logging",
      "cwe": "CWE-778",
      "vulnerability_type": "Insufficient Security Logging",
      "severity": "Low",
      "category": "security",
      "description": "Authentication failure without proper logging detected - A09:2021 – Security Logging and Monitoring Failures",
      "file_path": "examples/security_risks_test.js",
      "line_number": 113,
      "column": 21,
      "source_code": "console.log('Login failed');",
      "recommendation": "Implement comprehensive security logging and monitoring"
    },
    {
      "id": "cwe-89-sql-injection",
      "cwe": "CWE-89",
      "vulnerability_type": "SQL Injection",
      "severity": "Critical",
      "category": "vulnerability",
      "description": "SQL injection vulnerability through string interpolation - A03:2021 – Injection",
      "file_path": "examples/security_risks_test.js",
      "line_number": 66,
      "column": 19,
      "source_code": "const query = `SELECT * FROM users WHERE id = ${userId}`;  // SQL injection risk",
      "recommendation": "Use parameterized queries or prepared statements"
    },
    {
      "id": "cwe-22-path-traversal",
      "cwe": "CWE-22",
      "vulnerability_type": "Path Traversal",
      "severity": "High",
      "category": "vulnerability",
      "description": "Path traversal vulnerability detected - A01:2021 – Broken Access Control",
      "file_path": "examples/security_risks_test.js",
      "line_number": 119,
      "column": 18,
      "source_code": "return fs.readFileSync('../../../etc/passwd');  // Path traversal",
      "recommendation": "Validate and canonicalize file paths, use whitelist approach"
    },
    {
      "id": "javascript-prototype-pollution",
      "cwe": "CWE-1321",
      "vulnerability_type": "Prototype Pollution",
      "severity": "High",
      "category": "vulnerability",
      "description": "Potential prototype pollution vulnerability - A08:2021 – Software and Data Integrity Failures",
      "file_path": "examples/security_risks_test.js",
      "line_number": 38,
      "column": 21,
      "source_code": "if (key === '__proto__') {  // Prototype pollution vulnerability",
      "recommendation": "Validate object properties and use Object.freeze() or Map"
    }
  ],
  "files_analyzed": 12,
  "analysis_duration": {
    "secs": 0,
    "nanos": 736440786
  }
}